import { CalendarContext } from '@/use/calendar';
import { DatePickerContext } from '@/use/datePicker';
import { VueWrapper } from '@vue/test-utils';
import { ComponentPublicInstance, UnwrapNestedRefs } from 'vue';
export type CalendarComponent = UnwrapNestedRefs<CalendarContext> & ComponentPublicInstance;
export type DatePickerComponent = UnwrapNestedRefs<DatePickerContext> & ComponentPublicInstance;
export type PluginComponent = CalendarComponent | DatePickerComponent;
export type ComponentMount = (props?: any) => VueWrapper<PluginComponent>;
export declare function mountDp(ctx: any): VueWrapper<DatePickerComponent, {
    showCalendar: boolean;
    datePickerPopoverId: symbol;
    popoverRef: import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: (SymbolConstructor | StringConstructor | NumberConstructor)[];
            required: true;
        };
        showDelay: {
            type: NumberConstructor;
            default: number;
        };
        hideDelay: {
            type: NumberConstructor;
            default: number;
        };
        boundarySelector: {
            type: StringConstructor;
        };
    }>> & Readonly<{
        "onBefore-show"?: ((...args: any[]) => any) | undefined;
        "onAfter-show"?: ((...args: any[]) => any) | undefined;
        "onBefore-hide"?: ((...args: any[]) => any) | undefined;
        "onAfter-hide"?: ((...args: any[]) => any) | undefined;
    }>, {
        popoverRef: import("vue").Ref<HTMLElement | undefined, HTMLElement | undefined>;
        alignment: import("vue").ComputedRef<"center" | "left" | "right" | "top" | "bottom" | "middle">;
        hide: (opts?: Partial<import("../../../src/utils/popovers").PopoverOptions>) => void;
        setupPopper: () => void;
        beforeEnter: (el: Element) => void;
        afterEnter: (el: Element) => void;
        beforeLeave: (el: Element) => void;
        afterLeave: (el: Element) => void;
        onClick: (e: MouseEvent) => void;
        onMouseOver: () => void;
        onMouseLeave: () => void;
        onFocusIn: () => void;
        onFocusOut: (e: FocusEvent) => void;
        isVisible: import("vue").Ref<boolean, boolean>;
        target: import("vue").Ref<unknown, unknown>;
        data: import("vue").Ref<any, any>;
        transition: import("vue").Ref<string, string>;
        placement: import("vue").Ref<import("@popperjs/core").Placement, import("@popperjs/core").Placement>;
        direction: import("vue").Ref<string, string>;
        positionFixed: import("vue").Ref<false, false>;
        modifiers: import("vue").Ref<any[], any[]>;
        isInteractive: import("vue").Ref<boolean, boolean>;
        visibility: import("vue").Ref<import("../../../src/utils/popovers").PopoverVisibility, import("../../../src/utils/popovers").PopoverVisibility>;
        isHovered: import("vue").Ref<boolean, boolean>;
        isFocused: import("vue").Ref<boolean, boolean>;
        autoHide: import("vue").Ref<boolean, boolean>;
        force: import("vue").Ref<boolean, boolean>;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("before-show" | "after-show" | "before-hide" | "after-hide")[], import("vue").PublicProps, {
        showDelay: number;
        hideDelay: number;
    }, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: (SymbolConstructor | StringConstructor | NumberConstructor)[];
            required: true;
        };
        showDelay: {
            type: NumberConstructor;
            default: number;
        };
        hideDelay: {
            type: NumberConstructor;
            default: number;
        };
        boundarySelector: {
            type: StringConstructor;
        };
    }>> & Readonly<{
        "onBefore-show"?: ((...args: any[]) => any) | undefined;
        "onAfter-show"?: ((...args: any[]) => any) | undefined;
        "onBefore-hide"?: ((...args: any[]) => any) | undefined;
        "onAfter-hide"?: ((...args: any[]) => any) | undefined;
    }>, {
        popoverRef: import("vue").Ref<HTMLElement | undefined, HTMLElement | undefined>;
        alignment: import("vue").ComputedRef<"center" | "left" | "right" | "top" | "bottom" | "middle">;
        hide: (opts?: Partial<import("../../../src/utils/popovers").PopoverOptions>) => void;
        setupPopper: () => void;
        beforeEnter: (el: Element) => void;
        afterEnter: (el: Element) => void;
        beforeLeave: (el: Element) => void;
        afterLeave: (el: Element) => void;
        onClick: (e: MouseEvent) => void;
        onMouseOver: () => void;
        onMouseLeave: () => void;
        onFocusIn: () => void;
        onFocusOut: (e: FocusEvent) => void;
        isVisible: import("vue").Ref<boolean, boolean>;
        target: import("vue").Ref<unknown, unknown>;
        data: import("vue").Ref<any, any>;
        transition: import("vue").Ref<string, string>;
        placement: import("vue").Ref<import("@popperjs/core").Placement, import("@popperjs/core").Placement>;
        direction: import("vue").Ref<string, string>;
        positionFixed: import("vue").Ref<false, false>;
        modifiers: import("vue").Ref<any[], any[]>;
        isInteractive: import("vue").Ref<boolean, boolean>;
        visibility: import("vue").Ref<import("../../../src/utils/popovers").PopoverVisibility, import("../../../src/utils/popovers").PopoverVisibility>;
        isHovered: import("vue").Ref<boolean, boolean>;
        isFocused: import("vue").Ref<boolean, boolean>;
        autoHide: import("vue").Ref<boolean, boolean>;
        force: import("vue").Ref<boolean, boolean>;
    }, {}, {}, {}, {
        showDelay: number;
        hideDelay: number;
    }> | null;
    popoverEvents: Partial<import("../../../src/utils/popovers").PopoverEventHandlers>;
    calendarRef: import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("vue").ExtractPropTypes<{
        view: {
            type: import("vue").PropType<import("@/use/calendar").CalendarView>;
            default: string;
            validator(value: string): boolean;
        };
        rows: {
            type: NumberConstructor;
            default: number;
        };
        columns: {
            type: NumberConstructor;
            default: number;
        };
        step: NumberConstructor;
        titlePosition: {
            type: import("vue").PropType<import("../../../src/utils/page").TitlePosition>;
            default: () => import("../../../src/utils/page").TitlePosition;
        };
        navVisibility: {
            type: import("vue").PropType<import("../../../src/utils/popovers").PopoverVisibility>;
            default: () => import("../../../src/utils/popovers").PopoverVisibility;
        };
        showWeeknumbers: (BooleanConstructor | StringConstructor)[];
        showIsoWeeknumbers: (BooleanConstructor | StringConstructor)[];
        expanded: BooleanConstructor;
        borderless: BooleanConstructor;
        transparent: BooleanConstructor;
        initialPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        initialPagePosition: {
            type: NumberConstructor;
            default: number;
        };
        minPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        maxPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        transition: import("vue").PropType<import("@/use/calendar").MoveTransition>;
        attributes: import("vue").PropType<Partial<{
            key: string | number;
            hashcode: string;
            content: import("../../../src/utils/glyph").ContentConfig;
            highlight: import("../../../src/utils/glyph").HighlightConfig;
            dot: import("../../../src/utils/glyph").DotConfig;
            bar: import("../../../src/utils/glyph").BarConfig;
            popover: Partial<{
                label: string;
                visibility: import("../../../src/utils/popovers").PopoverVisibility;
                placement: import("@popperjs/core").Placement;
                hideIndicator: boolean;
                isInteractive: boolean;
            }>;
            event: Partial<{
                label: string;
            }>;
            dates: import("../../../src/utils/date/range").DateRangeSource[];
            customData: any;
            order: number;
            pinPage: boolean;
        }>[]>;
        trimWeeks: BooleanConstructor;
        disablePageSwipe: BooleanConstructor;
        color: {
            type: StringConstructor;
            default: () => any;
        };
        isDark: {
            type: import("vue").PropType<boolean | "system" | import("vue-screen-utils").DarkModeClassConfig>;
            default: () => any;
        };
        firstDayOfWeek: import("vue").PropType<import("../../../src/utils/date/helpers").DayOfWeek>;
        masks: ObjectConstructor;
        locale: import("vue").PropType<string | Record<string, any> | import("../../../src/utils/locale").default>;
        timezone: StringConstructor;
        minDate: null;
        maxDate: null;
        disabledDates: null;
    }>> & Readonly<{}>, {
        emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
        containerRef: import("vue").Ref<{
            querySelector: {
                <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
                <K_1 extends keyof SVGElementTagNameMap>(selectors: K_1): SVGElementTagNameMap[K_1] | null;
                <E extends Element = Element>(selectors: string): E | null;
            };
            addEventListener: Function;
            removeEventListener: Function;
            dispatchEvent: Function;
        } | null, (Pick<Element, "querySelector"> & import("../../../src/utils/helpers").CustomElement) | {
            querySelector: {
                <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
                <K_1 extends keyof SVGElementTagNameMap>(selectors: K_1): SVGElementTagNameMap[K_1] | null;
                <E extends Element = Element>(selectors: string): E | null;
            };
            addEventListener: Function;
            removeEventListener: Function;
            dispatchEvent: Function;
        } | null>;
        focusedDay: import("vue").Ref<{
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        } | null, import("../../../src/utils/page").CalendarDay | {
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        } | null>;
        inTransition: import("vue").Ref<boolean, boolean>;
        navPopoverId: import("vue").Ref<symbol, symbol>;
        dayPopoverId: import("vue").Ref<symbol, symbol>;
        view: import("vue").Ref<import("@/use/calendar").CalendarView, import("@/use/calendar").CalendarView>;
        pages: import("vue").Ref<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        }[], import("../../../src/utils/page").Page[] | {
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        }[]>;
        transitionName: import("vue").Ref<string, string>;
        theme: import("vue").ComputedRef<import("../../../src/utils/theme").Theme>;
        color: import("vue").ComputedRef<string>;
        displayMode: import("vue").ComputedRef<"light" | "dark">;
        locale: import("vue").ComputedRef<import("../../../src/utils/locale").default>;
        masks: import("vue").ComputedRef<any>;
        attributes: import("vue").ComputedRef<import("../../../src/utils/attribute").Attribute[]>;
        disabledAttribute: import("vue").ComputedRef<import("../../../src/utils/attribute").Attribute>;
        disabledDates: import("vue").ComputedRef<import("../../../src/utils/date/range").DateRange[]>;
        attributeContext: import("vue").ComputedRef<import("../../../src/utils/date/range").DateRangeContext>;
        days: import("vue").ComputedRef<import("../../../src/utils/page").CalendarDay[]>;
        dayCells: import("vue").ComputedRef<import("@/use/calendar").DayCells>;
        count: import("vue").ComputedRef<number>;
        step: import("vue").ComputedRef<number>;
        firstPage: import("vue").ComputedRef<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        } | null>;
        lastPage: import("vue").ComputedRef<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        } | null>;
        canMovePrev: import("vue").ComputedRef<boolean>;
        canMoveNext: import("vue").ComputedRef<boolean>;
        minPage: import("vue").ComputedRef<import("../../../src/utils/page").PageAddress | null>;
        maxPage: import("vue").ComputedRef<import("../../../src/utils/page").PageAddress | null>;
        isMonthly: import("vue").ComputedRef<boolean>;
        isWeekly: import("vue").ComputedRef<boolean>;
        isDaily: import("vue").ComputedRef<boolean>;
        navVisibility: import("vue").ComputedRef<import("../../../src/utils/popovers").PopoverVisibility>;
        showWeeknumbers: import("vue").ComputedRef<boolean>;
        showIsoWeeknumbers: import("vue").ComputedRef<boolean>;
        getDateAddress: (date: import("../../../src/utils/date/helpers").DateSource) => import("../../../src/utils/page").PageAddress;
        canMove: (target: import("@/use/calendar").MoveTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => boolean;
        canMoveBy: (pages: number, opts?: Partial<import("@/use/calendar").MoveOptions>) => boolean;
        move: (target: import("@/use/calendar").MoveTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        moveBy: (pages: number, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        movePrev: () => Promise<boolean>;
        moveNext: () => Promise<boolean>;
        onTransitionBeforeEnter: () => void;
        onTransitionAfterEnter: () => void;
        tryFocusDate: (date: Date) => boolean;
        focusDate: (date: Date, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        onKeydown: (event: KeyboardEvent) => void;
        onDayKeydown: (day: import("../../../src/utils/page").CalendarDay, event: KeyboardEvent) => void;
        onDayClick: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayMouseenter: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayMouseleave: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayFocusin: (day: import("../../../src/utils/page").CalendarDay, event: FocusEvent | null) => void;
        onDayFocusout: (day: import("../../../src/utils/page").CalendarDay, event: FocusEvent) => void;
        onWeeknumberClick: (week: import("../../../src/utils/page").CalendarWeek, event: MouseEvent) => void;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {
        view: import("@/use/calendar").CalendarView;
        trimWeeks: boolean;
        titlePosition: import("../../../src/utils/page").TitlePosition;
        color: string;
        isDark: boolean | "system" | import("vue-screen-utils").DarkModeClassConfig;
        navVisibility: import("../../../src/utils/popovers").PopoverVisibility;
        rows: number;
        columns: number;
        expanded: boolean;
        borderless: boolean;
        transparent: boolean;
        initialPagePosition: number;
        disablePageSwipe: boolean;
    }, true, {}, {}, {
        CalendarHeader: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
            page: {
                type: import("vue").PropType<import("../../../src/utils/page").Page>;
                required: true;
            };
            layout: {
                type: import("vue").PropType<string>;
            };
            isLg: {
                type: import("vue").PropType<boolean>;
            };
            isXl: {
                type: import("vue").PropType<boolean>;
            };
            is2xl: {
                type: import("vue").PropType<boolean>;
            };
            hideTitle: {
                type: import("vue").PropType<boolean>;
            };
            hideArrows: {
                type: import("vue").PropType<boolean>;
            };
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
            page: {
                type: import("vue").PropType<import("../../../src/utils/page").Page>;
                required: true;
            };
            layout: {
                type: import("vue").PropType<string>;
            };
            isLg: {
                type: import("vue").PropType<boolean>;
            };
            isXl: {
                type: import("vue").PropType<boolean>;
            };
            is2xl: {
                type: import("vue").PropType<boolean>;
            };
            hideTitle: {
                type: import("vue").PropType<boolean>;
            };
            hideArrows: {
                type: import("vue").PropType<boolean>;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
        CalendarPage: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
        CalendarNavPopover: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
        CalendarDayPopover: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
        CalendarPageProvider: {
            new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("vue").ExtractPropTypes<{
                page: {
                    type: import("vue").PropType<import("../../../src/utils/page").Page>;
                    required: true;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                P: {};
                B: {};
                D: {};
                C: {};
                M: {};
                Defaults: {};
            }, Readonly<import("vue").ExtractPropTypes<{
                page: {
                    type: import("vue").PropType<import("../../../src/utils/page").Page>;
                    required: true;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, {}>;
            __isFragment?: undefined;
            __isTeleport?: undefined;
            __isSuspense?: undefined;
        } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            page: {
                type: import("vue").PropType<import("../../../src/utils/page").Page>;
                required: true;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
            $slots: {
                default?(_: {}): any;
            };
        });
        CalendarSlot: {
            new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("vue").ExtractPropTypes<{
                name: {
                    type: import("vue").PropType<import("../../../src/components/Calendar/CalendarSlot.vue").CalendarSlotName>;
                    required: true;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                P: {};
                B: {};
                D: {};
                C: {};
                M: {};
                Defaults: {};
            }, Readonly<import("vue").ExtractPropTypes<{
                name: {
                    type: import("vue").PropType<import("../../../src/components/Calendar/CalendarSlot.vue").CalendarSlotName>;
                    required: true;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, {}>;
            __isFragment?: undefined;
            __isTeleport?: undefined;
            __isSuspense?: undefined;
        } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            name: {
                type: import("vue").PropType<import("../../../src/components/Calendar/CalendarSlot.vue").CalendarSlotName>;
                required: true;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
            $slots: {
                default?(_: {}): any;
            };
        });
    } & import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        view: {
            type: import("vue").PropType<import("@/use/calendar").CalendarView>;
            default: string;
            validator(value: string): boolean;
        };
        rows: {
            type: NumberConstructor;
            default: number;
        };
        columns: {
            type: NumberConstructor;
            default: number;
        };
        step: NumberConstructor;
        titlePosition: {
            type: import("vue").PropType<import("../../../src/utils/page").TitlePosition>;
            default: () => import("../../../src/utils/page").TitlePosition;
        };
        navVisibility: {
            type: import("vue").PropType<import("../../../src/utils/popovers").PopoverVisibility>;
            default: () => import("../../../src/utils/popovers").PopoverVisibility;
        };
        showWeeknumbers: (BooleanConstructor | StringConstructor)[];
        showIsoWeeknumbers: (BooleanConstructor | StringConstructor)[];
        expanded: BooleanConstructor;
        borderless: BooleanConstructor;
        transparent: BooleanConstructor;
        initialPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        initialPagePosition: {
            type: NumberConstructor;
            default: number;
        };
        minPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        maxPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        transition: import("vue").PropType<import("@/use/calendar").MoveTransition>;
        attributes: import("vue").PropType<Partial<{
            key: string | number;
            hashcode: string;
            content: import("../../../src/utils/glyph").ContentConfig;
            highlight: import("../../../src/utils/glyph").HighlightConfig;
            dot: import("../../../src/utils/glyph").DotConfig;
            bar: import("../../../src/utils/glyph").BarConfig;
            popover: Partial<{
                label: string;
                visibility: import("../../../src/utils/popovers").PopoverVisibility;
                placement: import("@popperjs/core").Placement;
                hideIndicator: boolean;
                isInteractive: boolean;
            }>;
            event: Partial<{
                label: string;
            }>;
            dates: import("../../../src/utils/date/range").DateRangeSource[];
            customData: any;
            order: number;
            pinPage: boolean;
        }>[]>;
        trimWeeks: BooleanConstructor;
        disablePageSwipe: BooleanConstructor;
        color: {
            type: StringConstructor;
            default: () => any;
        };
        isDark: {
            type: import("vue").PropType<boolean | "system" | import("vue-screen-utils").DarkModeClassConfig>;
            default: () => any;
        };
        firstDayOfWeek: import("vue").PropType<import("../../../src/utils/date/helpers").DayOfWeek>;
        masks: ObjectConstructor;
        locale: import("vue").PropType<string | Record<string, any> | import("../../../src/utils/locale").default>;
        timezone: StringConstructor;
        minDate: null;
        maxDate: null;
        disabledDates: null;
    }>> & Readonly<{}>, {
        emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
        containerRef: import("vue").Ref<{
            querySelector: {
                <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
                <K_1 extends keyof SVGElementTagNameMap>(selectors: K_1): SVGElementTagNameMap[K_1] | null;
                <E extends Element = Element>(selectors: string): E | null;
            };
            addEventListener: Function;
            removeEventListener: Function;
            dispatchEvent: Function;
        } | null, (Pick<Element, "querySelector"> & import("../../../src/utils/helpers").CustomElement) | {
            querySelector: {
                <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
                <K_1 extends keyof SVGElementTagNameMap>(selectors: K_1): SVGElementTagNameMap[K_1] | null;
                <E extends Element = Element>(selectors: string): E | null;
            };
            addEventListener: Function;
            removeEventListener: Function;
            dispatchEvent: Function;
        } | null>;
        focusedDay: import("vue").Ref<{
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        } | null, import("../../../src/utils/page").CalendarDay | {
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        } | null>;
        inTransition: import("vue").Ref<boolean, boolean>;
        navPopoverId: import("vue").Ref<symbol, symbol>;
        dayPopoverId: import("vue").Ref<symbol, symbol>;
        view: import("vue").Ref<import("@/use/calendar").CalendarView, import("@/use/calendar").CalendarView>;
        pages: import("vue").Ref<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        }[], import("../../../src/utils/page").Page[] | {
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        }[]>;
        transitionName: import("vue").Ref<string, string>;
        theme: import("vue").ComputedRef<import("../../../src/utils/theme").Theme>;
        color: import("vue").ComputedRef<string>;
        displayMode: import("vue").ComputedRef<"light" | "dark">;
        locale: import("vue").ComputedRef<import("../../../src/utils/locale").default>;
        masks: import("vue").ComputedRef<any>;
        attributes: import("vue").ComputedRef<import("../../../src/utils/attribute").Attribute[]>;
        disabledAttribute: import("vue").ComputedRef<import("../../../src/utils/attribute").Attribute>;
        disabledDates: import("vue").ComputedRef<import("../../../src/utils/date/range").DateRange[]>;
        attributeContext: import("vue").ComputedRef<import("../../../src/utils/date/range").DateRangeContext>;
        days: import("vue").ComputedRef<import("../../../src/utils/page").CalendarDay[]>;
        dayCells: import("vue").ComputedRef<import("@/use/calendar").DayCells>;
        count: import("vue").ComputedRef<number>;
        step: import("vue").ComputedRef<number>;
        firstPage: import("vue").ComputedRef<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        } | null>;
        lastPage: import("vue").ComputedRef<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        } | null>;
        canMovePrev: import("vue").ComputedRef<boolean>;
        canMoveNext: import("vue").ComputedRef<boolean>;
        minPage: import("vue").ComputedRef<import("../../../src/utils/page").PageAddress | null>;
        maxPage: import("vue").ComputedRef<import("../../../src/utils/page").PageAddress | null>;
        isMonthly: import("vue").ComputedRef<boolean>;
        isWeekly: import("vue").ComputedRef<boolean>;
        isDaily: import("vue").ComputedRef<boolean>;
        navVisibility: import("vue").ComputedRef<import("../../../src/utils/popovers").PopoverVisibility>;
        showWeeknumbers: import("vue").ComputedRef<boolean>;
        showIsoWeeknumbers: import("vue").ComputedRef<boolean>;
        getDateAddress: (date: import("../../../src/utils/date/helpers").DateSource) => import("../../../src/utils/page").PageAddress;
        canMove: (target: import("@/use/calendar").MoveTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => boolean;
        canMoveBy: (pages: number, opts?: Partial<import("@/use/calendar").MoveOptions>) => boolean;
        move: (target: import("@/use/calendar").MoveTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        moveBy: (pages: number, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        movePrev: () => Promise<boolean>;
        moveNext: () => Promise<boolean>;
        onTransitionBeforeEnter: () => void;
        onTransitionAfterEnter: () => void;
        tryFocusDate: (date: Date) => boolean;
        focusDate: (date: Date, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        onKeydown: (event: KeyboardEvent) => void;
        onDayKeydown: (day: import("../../../src/utils/page").CalendarDay, event: KeyboardEvent) => void;
        onDayClick: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayMouseenter: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayMouseleave: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayFocusin: (day: import("../../../src/utils/page").CalendarDay, event: FocusEvent | null) => void;
        onDayFocusout: (day: import("../../../src/utils/page").CalendarDay, event: FocusEvent) => void;
        onWeeknumberClick: (week: import("../../../src/utils/page").CalendarWeek, event: MouseEvent) => void;
    }, {}, {}, {}, {
        view: import("@/use/calendar").CalendarView;
        trimWeeks: boolean;
        titlePosition: import("../../../src/utils/page").TitlePosition;
        color: string;
        isDark: boolean | "system" | import("vue-screen-utils").DarkModeClassConfig;
        navVisibility: import("../../../src/utils/popovers").PopoverVisibility;
        rows: number;
        columns: number;
        expanded: boolean;
        borderless: boolean;
        transparent: boolean;
        initialPagePosition: number;
        disablePageSwipe: boolean;
    }> | null;
    isRange: boolean;
    isTimeMode: boolean;
    isDateTimeMode: boolean;
    is24hr: boolean;
    hideTimeHeader: boolean;
    timeAccuracy: number;
    isDragging: boolean;
    inputValue: string | {
        start: string;
        end: string;
    };
    inputEvents: {
        click?: ((e: MouseEvent) => void) | undefined;
        mousemove?: ((e: MouseEvent) => void) | undefined;
        mouseleave?: ((e: MouseEvent) => void) | undefined;
        focusin?: ((e: MouseEvent) => void) | undefined;
        focusout?: ((e: MouseEvent) => void) | undefined;
        input: (e: InputEvent) => void;
        change: (e: InputEvent) => void;
        keyup: (e: KeyboardEvent) => void;
    } | {
        start: {
            click?: ((e: MouseEvent) => void) | undefined;
            mousemove?: ((e: MouseEvent) => void) | undefined;
            mouseleave?: ((e: MouseEvent) => void) | undefined;
            focusin?: ((e: MouseEvent) => void) | undefined;
            focusout?: ((e: MouseEvent) => void) | undefined;
            input: (e: InputEvent) => void;
            change: (e: InputEvent) => void;
            keyup: (e: KeyboardEvent) => void;
        };
        end: {
            click?: ((e: MouseEvent) => void) | undefined;
            mousemove?: ((e: MouseEvent) => void) | undefined;
            mouseleave?: ((e: MouseEvent) => void) | undefined;
            focusin?: ((e: MouseEvent) => void) | undefined;
            focusout?: ((e: MouseEvent) => void) | undefined;
            input: (e: InputEvent) => void;
            change: (e: InputEvent) => void;
            keyup: (e: KeyboardEvent) => void;
        };
    };
    dateParts: (import("../../../src/utils/date/helpers").DateParts | null)[];
    attributes: any[];
    rules: import("../../../src/utils/date/helpers").DatePartsRules[];
    move: (target: import("@/use/calendar").MoveTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
    moveBy: (pages: number, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
    moveToValue: (target: import("@/use/datePicker").ValueTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
    updateValue: (value: any, opts?: Partial<import("@/use/datePicker").UpdateOptions>) => Promise<string | number | Date | import("../../../src/utils/date/helpers").DateParts | {
        start: string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
        end: string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
    } | null>;
    showPopover: (opts?: Partial<import("../../../src/utils/popovers").PopoverOptions>) => void;
    hidePopover: (opts?: Partial<import("../../../src/utils/popovers").PopoverOptions>) => void;
    togglePopover: (opts: Partial<import("../../../src/utils/popovers").PopoverOptions>) => void;
    onDayClick: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
    onDayKeydown: (day: import("../../../src/utils/page").CalendarDay, event: KeyboardEvent) => void;
    onDayMouseEnter: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
    onPopoverBeforeShow: (el: HTMLElement) => void;
    onPopoverAfterShow: (el: HTMLElement) => void;
    onPopoverBeforeHide: (el: HTMLElement) => void;
    onPopoverAfterHide: (el: HTMLElement) => void;
    color: string;
    isDark: boolean | "system" | import("vue-screen-utils").DarkModeClassConfig;
    displayMode: "light" | "dark";
    theme: import("../../../src/utils/theme").Theme;
    locale: import("../../../src/utils/locale").default;
    masks: any;
    minDate: any;
    maxDate: any;
    disabledDates: import("../../../src/utils/date/range").DateRange[];
    disabledAttribute: import("../../../src/utils/attribute").Attribute;
} & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: {};
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot<any> | undefined;
    }>;
    $root: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import("vue").ComponentProvideOptions>, {}, {}, "", {}, any> | null;
    $parent: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import("vue").ComponentProvideOptions>, {}, {}, "", {}, any> | null;
    $host: Element | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import("vue").ComponentProvideOptions> & {
        beforeCreate?: ((() => void) | (() => void)[]) | undefined;
        created?: ((() => void) | (() => void)[]) | undefined;
        beforeMount?: ((() => void) | (() => void)[]) | undefined;
        mounted?: ((() => void) | (() => void)[]) | undefined;
        beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
        updated?: ((() => void) | (() => void)[]) | undefined;
        activated?: ((() => void) | (() => void)[]) | undefined;
        deactivated?: ((() => void) | (() => void)[]) | undefined;
        beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
        beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
        destroyed?: ((() => void) | (() => void)[]) | undefined;
        unmounted?: ((() => void) | (() => void)[]) | undefined;
        renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
        renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
        errorCaptured?: (((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import("vue").ComponentProvideOptions>, {}, {}, "", {}, any> | null, info: string) => boolean | void) | ((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import("vue").ComponentProvideOptions>, {}, {}, "", {}, any> | null, info: string) => boolean | void)[]) | undefined;
    };
    $forceUpdate: () => void;
    $nextTick: typeof import("vue").nextTick;
    $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R, args_2: import("@vue/reactivity").OnCleanup) => any : (args_0: any, args_1: any, args_2: import("@vue/reactivity").OnCleanup) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & Readonly<{}> & Omit<{}, never> & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {}>;
export declare function getDayClass(vm: PluginComponent, date: Date): string;
export declare function getDayContentClass(vm: PluginComponent, date: Date): string;
export declare function expectValueEmitted(dp: VueWrapper<DatePickerComponent>, value: any): void;
export declare function expectNoValueEmitted(dp: VueWrapper<DatePickerComponent>): void;
export declare function renderFnEvents(evts: Record<string, Function>): Record<string, Function>;
export declare function mountWithInputs(ctx: any): VueWrapper<DatePickerComponent, {
    showCalendar: boolean;
    datePickerPopoverId: symbol;
    popoverRef: import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: (SymbolConstructor | StringConstructor | NumberConstructor)[];
            required: true;
        };
        showDelay: {
            type: NumberConstructor;
            default: number;
        };
        hideDelay: {
            type: NumberConstructor;
            default: number;
        };
        boundarySelector: {
            type: StringConstructor;
        };
    }>> & Readonly<{
        "onBefore-show"?: ((...args: any[]) => any) | undefined;
        "onAfter-show"?: ((...args: any[]) => any) | undefined;
        "onBefore-hide"?: ((...args: any[]) => any) | undefined;
        "onAfter-hide"?: ((...args: any[]) => any) | undefined;
    }>, {
        popoverRef: import("vue").Ref<HTMLElement | undefined, HTMLElement | undefined>;
        alignment: import("vue").ComputedRef<"center" | "left" | "right" | "top" | "bottom" | "middle">;
        hide: (opts?: Partial<import("../../../src/utils/popovers").PopoverOptions>) => void;
        setupPopper: () => void;
        beforeEnter: (el: Element) => void;
        afterEnter: (el: Element) => void;
        beforeLeave: (el: Element) => void;
        afterLeave: (el: Element) => void;
        onClick: (e: MouseEvent) => void;
        onMouseOver: () => void;
        onMouseLeave: () => void;
        onFocusIn: () => void;
        onFocusOut: (e: FocusEvent) => void;
        isVisible: import("vue").Ref<boolean, boolean>;
        target: import("vue").Ref<unknown, unknown>;
        data: import("vue").Ref<any, any>;
        transition: import("vue").Ref<string, string>;
        placement: import("vue").Ref<import("@popperjs/core").Placement, import("@popperjs/core").Placement>;
        direction: import("vue").Ref<string, string>;
        positionFixed: import("vue").Ref<false, false>;
        modifiers: import("vue").Ref<any[], any[]>;
        isInteractive: import("vue").Ref<boolean, boolean>;
        visibility: import("vue").Ref<import("../../../src/utils/popovers").PopoverVisibility, import("../../../src/utils/popovers").PopoverVisibility>;
        isHovered: import("vue").Ref<boolean, boolean>;
        isFocused: import("vue").Ref<boolean, boolean>;
        autoHide: import("vue").Ref<boolean, boolean>;
        force: import("vue").Ref<boolean, boolean>;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("before-show" | "after-show" | "before-hide" | "after-hide")[], import("vue").PublicProps, {
        showDelay: number;
        hideDelay: number;
    }, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: (SymbolConstructor | StringConstructor | NumberConstructor)[];
            required: true;
        };
        showDelay: {
            type: NumberConstructor;
            default: number;
        };
        hideDelay: {
            type: NumberConstructor;
            default: number;
        };
        boundarySelector: {
            type: StringConstructor;
        };
    }>> & Readonly<{
        "onBefore-show"?: ((...args: any[]) => any) | undefined;
        "onAfter-show"?: ((...args: any[]) => any) | undefined;
        "onBefore-hide"?: ((...args: any[]) => any) | undefined;
        "onAfter-hide"?: ((...args: any[]) => any) | undefined;
    }>, {
        popoverRef: import("vue").Ref<HTMLElement | undefined, HTMLElement | undefined>;
        alignment: import("vue").ComputedRef<"center" | "left" | "right" | "top" | "bottom" | "middle">;
        hide: (opts?: Partial<import("../../../src/utils/popovers").PopoverOptions>) => void;
        setupPopper: () => void;
        beforeEnter: (el: Element) => void;
        afterEnter: (el: Element) => void;
        beforeLeave: (el: Element) => void;
        afterLeave: (el: Element) => void;
        onClick: (e: MouseEvent) => void;
        onMouseOver: () => void;
        onMouseLeave: () => void;
        onFocusIn: () => void;
        onFocusOut: (e: FocusEvent) => void;
        isVisible: import("vue").Ref<boolean, boolean>;
        target: import("vue").Ref<unknown, unknown>;
        data: import("vue").Ref<any, any>;
        transition: import("vue").Ref<string, string>;
        placement: import("vue").Ref<import("@popperjs/core").Placement, import("@popperjs/core").Placement>;
        direction: import("vue").Ref<string, string>;
        positionFixed: import("vue").Ref<false, false>;
        modifiers: import("vue").Ref<any[], any[]>;
        isInteractive: import("vue").Ref<boolean, boolean>;
        visibility: import("vue").Ref<import("../../../src/utils/popovers").PopoverVisibility, import("../../../src/utils/popovers").PopoverVisibility>;
        isHovered: import("vue").Ref<boolean, boolean>;
        isFocused: import("vue").Ref<boolean, boolean>;
        autoHide: import("vue").Ref<boolean, boolean>;
        force: import("vue").Ref<boolean, boolean>;
    }, {}, {}, {}, {
        showDelay: number;
        hideDelay: number;
    }> | null;
    popoverEvents: Partial<import("../../../src/utils/popovers").PopoverEventHandlers>;
    calendarRef: import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("vue").ExtractPropTypes<{
        view: {
            type: import("vue").PropType<import("@/use/calendar").CalendarView>;
            default: string;
            validator(value: string): boolean;
        };
        rows: {
            type: NumberConstructor;
            default: number;
        };
        columns: {
            type: NumberConstructor;
            default: number;
        };
        step: NumberConstructor;
        titlePosition: {
            type: import("vue").PropType<import("../../../src/utils/page").TitlePosition>;
            default: () => import("../../../src/utils/page").TitlePosition;
        };
        navVisibility: {
            type: import("vue").PropType<import("../../../src/utils/popovers").PopoverVisibility>;
            default: () => import("../../../src/utils/popovers").PopoverVisibility;
        };
        showWeeknumbers: (BooleanConstructor | StringConstructor)[];
        showIsoWeeknumbers: (BooleanConstructor | StringConstructor)[];
        expanded: BooleanConstructor;
        borderless: BooleanConstructor;
        transparent: BooleanConstructor;
        initialPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        initialPagePosition: {
            type: NumberConstructor;
            default: number;
        };
        minPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        maxPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        transition: import("vue").PropType<import("@/use/calendar").MoveTransition>;
        attributes: import("vue").PropType<Partial<{
            key: string | number;
            hashcode: string;
            content: import("../../../src/utils/glyph").ContentConfig;
            highlight: import("../../../src/utils/glyph").HighlightConfig;
            dot: import("../../../src/utils/glyph").DotConfig;
            bar: import("../../../src/utils/glyph").BarConfig;
            popover: Partial<{
                label: string;
                visibility: import("../../../src/utils/popovers").PopoverVisibility;
                placement: import("@popperjs/core").Placement;
                hideIndicator: boolean;
                isInteractive: boolean;
            }>;
            event: Partial<{
                label: string;
            }>;
            dates: import("../../../src/utils/date/range").DateRangeSource[];
            customData: any;
            order: number;
            pinPage: boolean;
        }>[]>;
        trimWeeks: BooleanConstructor;
        disablePageSwipe: BooleanConstructor;
        color: {
            type: StringConstructor;
            default: () => any;
        };
        isDark: {
            type: import("vue").PropType<boolean | "system" | import("vue-screen-utils").DarkModeClassConfig>;
            default: () => any;
        };
        firstDayOfWeek: import("vue").PropType<import("../../../src/utils/date/helpers").DayOfWeek>;
        masks: ObjectConstructor;
        locale: import("vue").PropType<string | Record<string, any> | import("../../../src/utils/locale").default>;
        timezone: StringConstructor;
        minDate: null;
        maxDate: null;
        disabledDates: null;
    }>> & Readonly<{}>, {
        emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
        containerRef: import("vue").Ref<{
            querySelector: {
                <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
                <K_1 extends keyof SVGElementTagNameMap>(selectors: K_1): SVGElementTagNameMap[K_1] | null;
                <E extends Element = Element>(selectors: string): E | null;
            };
            addEventListener: Function;
            removeEventListener: Function;
            dispatchEvent: Function;
        } | null, (Pick<Element, "querySelector"> & import("../../../src/utils/helpers").CustomElement) | {
            querySelector: {
                <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
                <K_1 extends keyof SVGElementTagNameMap>(selectors: K_1): SVGElementTagNameMap[K_1] | null;
                <E extends Element = Element>(selectors: string): E | null;
            };
            addEventListener: Function;
            removeEventListener: Function;
            dispatchEvent: Function;
        } | null>;
        focusedDay: import("vue").Ref<{
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        } | null, import("../../../src/utils/page").CalendarDay | {
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        } | null>;
        inTransition: import("vue").Ref<boolean, boolean>;
        navPopoverId: import("vue").Ref<symbol, symbol>;
        dayPopoverId: import("vue").Ref<symbol, symbol>;
        view: import("vue").Ref<import("@/use/calendar").CalendarView, import("@/use/calendar").CalendarView>;
        pages: import("vue").Ref<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        }[], import("../../../src/utils/page").Page[] | {
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        }[]>;
        transitionName: import("vue").Ref<string, string>;
        theme: import("vue").ComputedRef<import("../../../src/utils/theme").Theme>;
        color: import("vue").ComputedRef<string>;
        displayMode: import("vue").ComputedRef<"light" | "dark">;
        locale: import("vue").ComputedRef<import("../../../src/utils/locale").default>;
        masks: import("vue").ComputedRef<any>;
        attributes: import("vue").ComputedRef<import("../../../src/utils/attribute").Attribute[]>;
        disabledAttribute: import("vue").ComputedRef<import("../../../src/utils/attribute").Attribute>;
        disabledDates: import("vue").ComputedRef<import("../../../src/utils/date/range").DateRange[]>;
        attributeContext: import("vue").ComputedRef<import("../../../src/utils/date/range").DateRangeContext>;
        days: import("vue").ComputedRef<import("../../../src/utils/page").CalendarDay[]>;
        dayCells: import("vue").ComputedRef<import("@/use/calendar").DayCells>;
        count: import("vue").ComputedRef<number>;
        step: import("vue").ComputedRef<number>;
        firstPage: import("vue").ComputedRef<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        } | null>;
        lastPage: import("vue").ComputedRef<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        } | null>;
        canMovePrev: import("vue").ComputedRef<boolean>;
        canMoveNext: import("vue").ComputedRef<boolean>;
        minPage: import("vue").ComputedRef<import("../../../src/utils/page").PageAddress | null>;
        maxPage: import("vue").ComputedRef<import("../../../src/utils/page").PageAddress | null>;
        isMonthly: import("vue").ComputedRef<boolean>;
        isWeekly: import("vue").ComputedRef<boolean>;
        isDaily: import("vue").ComputedRef<boolean>;
        navVisibility: import("vue").ComputedRef<import("../../../src/utils/popovers").PopoverVisibility>;
        showWeeknumbers: import("vue").ComputedRef<boolean>;
        showIsoWeeknumbers: import("vue").ComputedRef<boolean>;
        getDateAddress: (date: import("../../../src/utils/date/helpers").DateSource) => import("../../../src/utils/page").PageAddress;
        canMove: (target: import("@/use/calendar").MoveTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => boolean;
        canMoveBy: (pages: number, opts?: Partial<import("@/use/calendar").MoveOptions>) => boolean;
        move: (target: import("@/use/calendar").MoveTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        moveBy: (pages: number, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        movePrev: () => Promise<boolean>;
        moveNext: () => Promise<boolean>;
        onTransitionBeforeEnter: () => void;
        onTransitionAfterEnter: () => void;
        tryFocusDate: (date: Date) => boolean;
        focusDate: (date: Date, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        onKeydown: (event: KeyboardEvent) => void;
        onDayKeydown: (day: import("../../../src/utils/page").CalendarDay, event: KeyboardEvent) => void;
        onDayClick: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayMouseenter: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayMouseleave: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayFocusin: (day: import("../../../src/utils/page").CalendarDay, event: FocusEvent | null) => void;
        onDayFocusout: (day: import("../../../src/utils/page").CalendarDay, event: FocusEvent) => void;
        onWeeknumberClick: (week: import("../../../src/utils/page").CalendarWeek, event: MouseEvent) => void;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {
        view: import("@/use/calendar").CalendarView;
        trimWeeks: boolean;
        titlePosition: import("../../../src/utils/page").TitlePosition;
        color: string;
        isDark: boolean | "system" | import("vue-screen-utils").DarkModeClassConfig;
        navVisibility: import("../../../src/utils/popovers").PopoverVisibility;
        rows: number;
        columns: number;
        expanded: boolean;
        borderless: boolean;
        transparent: boolean;
        initialPagePosition: number;
        disablePageSwipe: boolean;
    }, true, {}, {}, {
        CalendarHeader: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
            page: {
                type: import("vue").PropType<import("../../../src/utils/page").Page>;
                required: true;
            };
            layout: {
                type: import("vue").PropType<string>;
            };
            isLg: {
                type: import("vue").PropType<boolean>;
            };
            isXl: {
                type: import("vue").PropType<boolean>;
            };
            is2xl: {
                type: import("vue").PropType<boolean>;
            };
            hideTitle: {
                type: import("vue").PropType<boolean>;
            };
            hideArrows: {
                type: import("vue").PropType<boolean>;
            };
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
            page: {
                type: import("vue").PropType<import("../../../src/utils/page").Page>;
                required: true;
            };
            layout: {
                type: import("vue").PropType<string>;
            };
            isLg: {
                type: import("vue").PropType<boolean>;
            };
            isXl: {
                type: import("vue").PropType<boolean>;
            };
            is2xl: {
                type: import("vue").PropType<boolean>;
            };
            hideTitle: {
                type: import("vue").PropType<boolean>;
            };
            hideArrows: {
                type: import("vue").PropType<boolean>;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
        CalendarPage: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
        CalendarNavPopover: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
        CalendarDayPopover: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
        CalendarPageProvider: {
            new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("vue").ExtractPropTypes<{
                page: {
                    type: import("vue").PropType<import("../../../src/utils/page").Page>;
                    required: true;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                P: {};
                B: {};
                D: {};
                C: {};
                M: {};
                Defaults: {};
            }, Readonly<import("vue").ExtractPropTypes<{
                page: {
                    type: import("vue").PropType<import("../../../src/utils/page").Page>;
                    required: true;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, {}>;
            __isFragment?: undefined;
            __isTeleport?: undefined;
            __isSuspense?: undefined;
        } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            page: {
                type: import("vue").PropType<import("../../../src/utils/page").Page>;
                required: true;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
            $slots: {
                default?(_: {}): any;
            };
        });
        CalendarSlot: {
            new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("vue").ExtractPropTypes<{
                name: {
                    type: import("vue").PropType<import("../../../src/components/Calendar/CalendarSlot.vue").CalendarSlotName>;
                    required: true;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                P: {};
                B: {};
                D: {};
                C: {};
                M: {};
                Defaults: {};
            }, Readonly<import("vue").ExtractPropTypes<{
                name: {
                    type: import("vue").PropType<import("../../../src/components/Calendar/CalendarSlot.vue").CalendarSlotName>;
                    required: true;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, {}>;
            __isFragment?: undefined;
            __isTeleport?: undefined;
            __isSuspense?: undefined;
        } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            name: {
                type: import("vue").PropType<import("../../../src/components/Calendar/CalendarSlot.vue").CalendarSlotName>;
                required: true;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
            $slots: {
                default?(_: {}): any;
            };
        });
    } & import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        view: {
            type: import("vue").PropType<import("@/use/calendar").CalendarView>;
            default: string;
            validator(value: string): boolean;
        };
        rows: {
            type: NumberConstructor;
            default: number;
        };
        columns: {
            type: NumberConstructor;
            default: number;
        };
        step: NumberConstructor;
        titlePosition: {
            type: import("vue").PropType<import("../../../src/utils/page").TitlePosition>;
            default: () => import("../../../src/utils/page").TitlePosition;
        };
        navVisibility: {
            type: import("vue").PropType<import("../../../src/utils/popovers").PopoverVisibility>;
            default: () => import("../../../src/utils/popovers").PopoverVisibility;
        };
        showWeeknumbers: (BooleanConstructor | StringConstructor)[];
        showIsoWeeknumbers: (BooleanConstructor | StringConstructor)[];
        expanded: BooleanConstructor;
        borderless: BooleanConstructor;
        transparent: BooleanConstructor;
        initialPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        initialPagePosition: {
            type: NumberConstructor;
            default: number;
        };
        minPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        maxPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        transition: import("vue").PropType<import("@/use/calendar").MoveTransition>;
        attributes: import("vue").PropType<Partial<{
            key: string | number;
            hashcode: string;
            content: import("../../../src/utils/glyph").ContentConfig;
            highlight: import("../../../src/utils/glyph").HighlightConfig;
            dot: import("../../../src/utils/glyph").DotConfig;
            bar: import("../../../src/utils/glyph").BarConfig;
            popover: Partial<{
                label: string;
                visibility: import("../../../src/utils/popovers").PopoverVisibility;
                placement: import("@popperjs/core").Placement;
                hideIndicator: boolean;
                isInteractive: boolean;
            }>;
            event: Partial<{
                label: string;
            }>;
            dates: import("../../../src/utils/date/range").DateRangeSource[];
            customData: any;
            order: number;
            pinPage: boolean;
        }>[]>;
        trimWeeks: BooleanConstructor;
        disablePageSwipe: BooleanConstructor;
        color: {
            type: StringConstructor;
            default: () => any;
        };
        isDark: {
            type: import("vue").PropType<boolean | "system" | import("vue-screen-utils").DarkModeClassConfig>;
            default: () => any;
        };
        firstDayOfWeek: import("vue").PropType<import("../../../src/utils/date/helpers").DayOfWeek>;
        masks: ObjectConstructor;
        locale: import("vue").PropType<string | Record<string, any> | import("../../../src/utils/locale").default>;
        timezone: StringConstructor;
        minDate: null;
        maxDate: null;
        disabledDates: null;
    }>> & Readonly<{}>, {
        emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
        containerRef: import("vue").Ref<{
            querySelector: {
                <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
                <K_1 extends keyof SVGElementTagNameMap>(selectors: K_1): SVGElementTagNameMap[K_1] | null;
                <E extends Element = Element>(selectors: string): E | null;
            };
            addEventListener: Function;
            removeEventListener: Function;
            dispatchEvent: Function;
        } | null, (Pick<Element, "querySelector"> & import("../../../src/utils/helpers").CustomElement) | {
            querySelector: {
                <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
                <K_1 extends keyof SVGElementTagNameMap>(selectors: K_1): SVGElementTagNameMap[K_1] | null;
                <E extends Element = Element>(selectors: string): E | null;
            };
            addEventListener: Function;
            removeEventListener: Function;
            dispatchEvent: Function;
        } | null>;
        focusedDay: import("vue").Ref<{
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        } | null, import("../../../src/utils/page").CalendarDay | {
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        } | null>;
        inTransition: import("vue").Ref<boolean, boolean>;
        navPopoverId: import("vue").Ref<symbol, symbol>;
        dayPopoverId: import("vue").Ref<symbol, symbol>;
        view: import("vue").Ref<import("@/use/calendar").CalendarView, import("@/use/calendar").CalendarView>;
        pages: import("vue").Ref<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        }[], import("../../../src/utils/page").Page[] | {
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        }[]>;
        transitionName: import("vue").Ref<string, string>;
        theme: import("vue").ComputedRef<import("../../../src/utils/theme").Theme>;
        color: import("vue").ComputedRef<string>;
        displayMode: import("vue").ComputedRef<"light" | "dark">;
        locale: import("vue").ComputedRef<import("../../../src/utils/locale").default>;
        masks: import("vue").ComputedRef<any>;
        attributes: import("vue").ComputedRef<import("../../../src/utils/attribute").Attribute[]>;
        disabledAttribute: import("vue").ComputedRef<import("../../../src/utils/attribute").Attribute>;
        disabledDates: import("vue").ComputedRef<import("../../../src/utils/date/range").DateRange[]>;
        attributeContext: import("vue").ComputedRef<import("../../../src/utils/date/range").DateRangeContext>;
        days: import("vue").ComputedRef<import("../../../src/utils/page").CalendarDay[]>;
        dayCells: import("vue").ComputedRef<import("@/use/calendar").DayCells>;
        count: import("vue").ComputedRef<number>;
        step: import("vue").ComputedRef<number>;
        firstPage: import("vue").ComputedRef<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        } | null>;
        lastPage: import("vue").ComputedRef<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        } | null>;
        canMovePrev: import("vue").ComputedRef<boolean>;
        canMoveNext: import("vue").ComputedRef<boolean>;
        minPage: import("vue").ComputedRef<import("../../../src/utils/page").PageAddress | null>;
        maxPage: import("vue").ComputedRef<import("../../../src/utils/page").PageAddress | null>;
        isMonthly: import("vue").ComputedRef<boolean>;
        isWeekly: import("vue").ComputedRef<boolean>;
        isDaily: import("vue").ComputedRef<boolean>;
        navVisibility: import("vue").ComputedRef<import("../../../src/utils/popovers").PopoverVisibility>;
        showWeeknumbers: import("vue").ComputedRef<boolean>;
        showIsoWeeknumbers: import("vue").ComputedRef<boolean>;
        getDateAddress: (date: import("../../../src/utils/date/helpers").DateSource) => import("../../../src/utils/page").PageAddress;
        canMove: (target: import("@/use/calendar").MoveTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => boolean;
        canMoveBy: (pages: number, opts?: Partial<import("@/use/calendar").MoveOptions>) => boolean;
        move: (target: import("@/use/calendar").MoveTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        moveBy: (pages: number, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        movePrev: () => Promise<boolean>;
        moveNext: () => Promise<boolean>;
        onTransitionBeforeEnter: () => void;
        onTransitionAfterEnter: () => void;
        tryFocusDate: (date: Date) => boolean;
        focusDate: (date: Date, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        onKeydown: (event: KeyboardEvent) => void;
        onDayKeydown: (day: import("../../../src/utils/page").CalendarDay, event: KeyboardEvent) => void;
        onDayClick: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayMouseenter: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayMouseleave: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayFocusin: (day: import("../../../src/utils/page").CalendarDay, event: FocusEvent | null) => void;
        onDayFocusout: (day: import("../../../src/utils/page").CalendarDay, event: FocusEvent) => void;
        onWeeknumberClick: (week: import("../../../src/utils/page").CalendarWeek, event: MouseEvent) => void;
    }, {}, {}, {}, {
        view: import("@/use/calendar").CalendarView;
        trimWeeks: boolean;
        titlePosition: import("../../../src/utils/page").TitlePosition;
        color: string;
        isDark: boolean | "system" | import("vue-screen-utils").DarkModeClassConfig;
        navVisibility: import("../../../src/utils/popovers").PopoverVisibility;
        rows: number;
        columns: number;
        expanded: boolean;
        borderless: boolean;
        transparent: boolean;
        initialPagePosition: number;
        disablePageSwipe: boolean;
    }> | null;
    isRange: boolean;
    isTimeMode: boolean;
    isDateTimeMode: boolean;
    is24hr: boolean;
    hideTimeHeader: boolean;
    timeAccuracy: number;
    isDragging: boolean;
    inputValue: string | {
        start: string;
        end: string;
    };
    inputEvents: {
        click?: ((e: MouseEvent) => void) | undefined;
        mousemove?: ((e: MouseEvent) => void) | undefined;
        mouseleave?: ((e: MouseEvent) => void) | undefined;
        focusin?: ((e: MouseEvent) => void) | undefined;
        focusout?: ((e: MouseEvent) => void) | undefined;
        input: (e: InputEvent) => void;
        change: (e: InputEvent) => void;
        keyup: (e: KeyboardEvent) => void;
    } | {
        start: {
            click?: ((e: MouseEvent) => void) | undefined;
            mousemove?: ((e: MouseEvent) => void) | undefined;
            mouseleave?: ((e: MouseEvent) => void) | undefined;
            focusin?: ((e: MouseEvent) => void) | undefined;
            focusout?: ((e: MouseEvent) => void) | undefined;
            input: (e: InputEvent) => void;
            change: (e: InputEvent) => void;
            keyup: (e: KeyboardEvent) => void;
        };
        end: {
            click?: ((e: MouseEvent) => void) | undefined;
            mousemove?: ((e: MouseEvent) => void) | undefined;
            mouseleave?: ((e: MouseEvent) => void) | undefined;
            focusin?: ((e: MouseEvent) => void) | undefined;
            focusout?: ((e: MouseEvent) => void) | undefined;
            input: (e: InputEvent) => void;
            change: (e: InputEvent) => void;
            keyup: (e: KeyboardEvent) => void;
        };
    };
    dateParts: (import("../../../src/utils/date/helpers").DateParts | null)[];
    attributes: any[];
    rules: import("../../../src/utils/date/helpers").DatePartsRules[];
    move: (target: import("@/use/calendar").MoveTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
    moveBy: (pages: number, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
    moveToValue: (target: import("@/use/datePicker").ValueTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
    updateValue: (value: any, opts?: Partial<import("@/use/datePicker").UpdateOptions>) => Promise<string | number | Date | import("../../../src/utils/date/helpers").DateParts | {
        start: string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
        end: string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
    } | null>;
    showPopover: (opts?: Partial<import("../../../src/utils/popovers").PopoverOptions>) => void;
    hidePopover: (opts?: Partial<import("../../../src/utils/popovers").PopoverOptions>) => void;
    togglePopover: (opts: Partial<import("../../../src/utils/popovers").PopoverOptions>) => void;
    onDayClick: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
    onDayKeydown: (day: import("../../../src/utils/page").CalendarDay, event: KeyboardEvent) => void;
    onDayMouseEnter: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
    onPopoverBeforeShow: (el: HTMLElement) => void;
    onPopoverAfterShow: (el: HTMLElement) => void;
    onPopoverBeforeHide: (el: HTMLElement) => void;
    onPopoverAfterHide: (el: HTMLElement) => void;
    color: string;
    isDark: boolean | "system" | import("vue-screen-utils").DarkModeClassConfig;
    displayMode: "light" | "dark";
    theme: import("../../../src/utils/theme").Theme;
    locale: import("../../../src/utils/locale").default;
    masks: any;
    minDate: any;
    maxDate: any;
    disabledDates: import("../../../src/utils/date/range").DateRange[];
    disabledAttribute: import("../../../src/utils/attribute").Attribute;
} & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: {};
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot<any> | undefined;
    }>;
    $root: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import("vue").ComponentProvideOptions>, {}, {}, "", {}, any> | null;
    $parent: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import("vue").ComponentProvideOptions>, {}, {}, "", {}, any> | null;
    $host: Element | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import("vue").ComponentProvideOptions> & {
        beforeCreate?: ((() => void) | (() => void)[]) | undefined;
        created?: ((() => void) | (() => void)[]) | undefined;
        beforeMount?: ((() => void) | (() => void)[]) | undefined;
        mounted?: ((() => void) | (() => void)[]) | undefined;
        beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
        updated?: ((() => void) | (() => void)[]) | undefined;
        activated?: ((() => void) | (() => void)[]) | undefined;
        deactivated?: ((() => void) | (() => void)[]) | undefined;
        beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
        beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
        destroyed?: ((() => void) | (() => void)[]) | undefined;
        unmounted?: ((() => void) | (() => void)[]) | undefined;
        renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
        renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
        errorCaptured?: (((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import("vue").ComponentProvideOptions>, {}, {}, "", {}, any> | null, info: string) => boolean | void) | ((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import("vue").ComponentProvideOptions>, {}, {}, "", {}, any> | null, info: string) => boolean | void)[]) | undefined;
    };
    $forceUpdate: () => void;
    $nextTick: typeof import("vue").nextTick;
    $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R, args_2: import("@vue/reactivity").OnCleanup) => any : (args_0: any, args_1: any, args_2: import("@vue/reactivity").OnCleanup) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & Readonly<{}> & Omit<{}, never> & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {}>;
export declare function mountWithRangeInputs(ctx: any): VueWrapper<DatePickerComponent, {
    showCalendar: boolean;
    datePickerPopoverId: symbol;
    popoverRef: import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: (SymbolConstructor | StringConstructor | NumberConstructor)[];
            required: true;
        };
        showDelay: {
            type: NumberConstructor;
            default: number;
        };
        hideDelay: {
            type: NumberConstructor;
            default: number;
        };
        boundarySelector: {
            type: StringConstructor;
        };
    }>> & Readonly<{
        "onBefore-show"?: ((...args: any[]) => any) | undefined;
        "onAfter-show"?: ((...args: any[]) => any) | undefined;
        "onBefore-hide"?: ((...args: any[]) => any) | undefined;
        "onAfter-hide"?: ((...args: any[]) => any) | undefined;
    }>, {
        popoverRef: import("vue").Ref<HTMLElement | undefined, HTMLElement | undefined>;
        alignment: import("vue").ComputedRef<"center" | "left" | "right" | "top" | "bottom" | "middle">;
        hide: (opts?: Partial<import("../../../src/utils/popovers").PopoverOptions>) => void;
        setupPopper: () => void;
        beforeEnter: (el: Element) => void;
        afterEnter: (el: Element) => void;
        beforeLeave: (el: Element) => void;
        afterLeave: (el: Element) => void;
        onClick: (e: MouseEvent) => void;
        onMouseOver: () => void;
        onMouseLeave: () => void;
        onFocusIn: () => void;
        onFocusOut: (e: FocusEvent) => void;
        isVisible: import("vue").Ref<boolean, boolean>;
        target: import("vue").Ref<unknown, unknown>;
        data: import("vue").Ref<any, any>;
        transition: import("vue").Ref<string, string>;
        placement: import("vue").Ref<import("@popperjs/core").Placement, import("@popperjs/core").Placement>;
        direction: import("vue").Ref<string, string>;
        positionFixed: import("vue").Ref<false, false>;
        modifiers: import("vue").Ref<any[], any[]>;
        isInteractive: import("vue").Ref<boolean, boolean>;
        visibility: import("vue").Ref<import("../../../src/utils/popovers").PopoverVisibility, import("../../../src/utils/popovers").PopoverVisibility>;
        isHovered: import("vue").Ref<boolean, boolean>;
        isFocused: import("vue").Ref<boolean, boolean>;
        autoHide: import("vue").Ref<boolean, boolean>;
        force: import("vue").Ref<boolean, boolean>;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("before-show" | "after-show" | "before-hide" | "after-hide")[], import("vue").PublicProps, {
        showDelay: number;
        hideDelay: number;
    }, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: (SymbolConstructor | StringConstructor | NumberConstructor)[];
            required: true;
        };
        showDelay: {
            type: NumberConstructor;
            default: number;
        };
        hideDelay: {
            type: NumberConstructor;
            default: number;
        };
        boundarySelector: {
            type: StringConstructor;
        };
    }>> & Readonly<{
        "onBefore-show"?: ((...args: any[]) => any) | undefined;
        "onAfter-show"?: ((...args: any[]) => any) | undefined;
        "onBefore-hide"?: ((...args: any[]) => any) | undefined;
        "onAfter-hide"?: ((...args: any[]) => any) | undefined;
    }>, {
        popoverRef: import("vue").Ref<HTMLElement | undefined, HTMLElement | undefined>;
        alignment: import("vue").ComputedRef<"center" | "left" | "right" | "top" | "bottom" | "middle">;
        hide: (opts?: Partial<import("../../../src/utils/popovers").PopoverOptions>) => void;
        setupPopper: () => void;
        beforeEnter: (el: Element) => void;
        afterEnter: (el: Element) => void;
        beforeLeave: (el: Element) => void;
        afterLeave: (el: Element) => void;
        onClick: (e: MouseEvent) => void;
        onMouseOver: () => void;
        onMouseLeave: () => void;
        onFocusIn: () => void;
        onFocusOut: (e: FocusEvent) => void;
        isVisible: import("vue").Ref<boolean, boolean>;
        target: import("vue").Ref<unknown, unknown>;
        data: import("vue").Ref<any, any>;
        transition: import("vue").Ref<string, string>;
        placement: import("vue").Ref<import("@popperjs/core").Placement, import("@popperjs/core").Placement>;
        direction: import("vue").Ref<string, string>;
        positionFixed: import("vue").Ref<false, false>;
        modifiers: import("vue").Ref<any[], any[]>;
        isInteractive: import("vue").Ref<boolean, boolean>;
        visibility: import("vue").Ref<import("../../../src/utils/popovers").PopoverVisibility, import("../../../src/utils/popovers").PopoverVisibility>;
        isHovered: import("vue").Ref<boolean, boolean>;
        isFocused: import("vue").Ref<boolean, boolean>;
        autoHide: import("vue").Ref<boolean, boolean>;
        force: import("vue").Ref<boolean, boolean>;
    }, {}, {}, {}, {
        showDelay: number;
        hideDelay: number;
    }> | null;
    popoverEvents: Partial<import("../../../src/utils/popovers").PopoverEventHandlers>;
    calendarRef: import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("vue").ExtractPropTypes<{
        view: {
            type: import("vue").PropType<import("@/use/calendar").CalendarView>;
            default: string;
            validator(value: string): boolean;
        };
        rows: {
            type: NumberConstructor;
            default: number;
        };
        columns: {
            type: NumberConstructor;
            default: number;
        };
        step: NumberConstructor;
        titlePosition: {
            type: import("vue").PropType<import("../../../src/utils/page").TitlePosition>;
            default: () => import("../../../src/utils/page").TitlePosition;
        };
        navVisibility: {
            type: import("vue").PropType<import("../../../src/utils/popovers").PopoverVisibility>;
            default: () => import("../../../src/utils/popovers").PopoverVisibility;
        };
        showWeeknumbers: (BooleanConstructor | StringConstructor)[];
        showIsoWeeknumbers: (BooleanConstructor | StringConstructor)[];
        expanded: BooleanConstructor;
        borderless: BooleanConstructor;
        transparent: BooleanConstructor;
        initialPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        initialPagePosition: {
            type: NumberConstructor;
            default: number;
        };
        minPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        maxPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        transition: import("vue").PropType<import("@/use/calendar").MoveTransition>;
        attributes: import("vue").PropType<Partial<{
            key: string | number;
            hashcode: string;
            content: import("../../../src/utils/glyph").ContentConfig;
            highlight: import("../../../src/utils/glyph").HighlightConfig;
            dot: import("../../../src/utils/glyph").DotConfig;
            bar: import("../../../src/utils/glyph").BarConfig;
            popover: Partial<{
                label: string;
                visibility: import("../../../src/utils/popovers").PopoverVisibility;
                placement: import("@popperjs/core").Placement;
                hideIndicator: boolean;
                isInteractive: boolean;
            }>;
            event: Partial<{
                label: string;
            }>;
            dates: import("../../../src/utils/date/range").DateRangeSource[];
            customData: any;
            order: number;
            pinPage: boolean;
        }>[]>;
        trimWeeks: BooleanConstructor;
        disablePageSwipe: BooleanConstructor;
        color: {
            type: StringConstructor;
            default: () => any;
        };
        isDark: {
            type: import("vue").PropType<boolean | "system" | import("vue-screen-utils").DarkModeClassConfig>;
            default: () => any;
        };
        firstDayOfWeek: import("vue").PropType<import("../../../src/utils/date/helpers").DayOfWeek>;
        masks: ObjectConstructor;
        locale: import("vue").PropType<string | Record<string, any> | import("../../../src/utils/locale").default>;
        timezone: StringConstructor;
        minDate: null;
        maxDate: null;
        disabledDates: null;
    }>> & Readonly<{}>, {
        emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
        containerRef: import("vue").Ref<{
            querySelector: {
                <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
                <K_1 extends keyof SVGElementTagNameMap>(selectors: K_1): SVGElementTagNameMap[K_1] | null;
                <E extends Element = Element>(selectors: string): E | null;
            };
            addEventListener: Function;
            removeEventListener: Function;
            dispatchEvent: Function;
        } | null, (Pick<Element, "querySelector"> & import("../../../src/utils/helpers").CustomElement) | {
            querySelector: {
                <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
                <K_1 extends keyof SVGElementTagNameMap>(selectors: K_1): SVGElementTagNameMap[K_1] | null;
                <E extends Element = Element>(selectors: string): E | null;
            };
            addEventListener: Function;
            removeEventListener: Function;
            dispatchEvent: Function;
        } | null>;
        focusedDay: import("vue").Ref<{
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        } | null, import("../../../src/utils/page").CalendarDay | {
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        } | null>;
        inTransition: import("vue").Ref<boolean, boolean>;
        navPopoverId: import("vue").Ref<symbol, symbol>;
        dayPopoverId: import("vue").Ref<symbol, symbol>;
        view: import("vue").Ref<import("@/use/calendar").CalendarView, import("@/use/calendar").CalendarView>;
        pages: import("vue").Ref<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        }[], import("../../../src/utils/page").Page[] | {
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        }[]>;
        transitionName: import("vue").Ref<string, string>;
        theme: import("vue").ComputedRef<import("../../../src/utils/theme").Theme>;
        color: import("vue").ComputedRef<string>;
        displayMode: import("vue").ComputedRef<"light" | "dark">;
        locale: import("vue").ComputedRef<import("../../../src/utils/locale").default>;
        masks: import("vue").ComputedRef<any>;
        attributes: import("vue").ComputedRef<import("../../../src/utils/attribute").Attribute[]>;
        disabledAttribute: import("vue").ComputedRef<import("../../../src/utils/attribute").Attribute>;
        disabledDates: import("vue").ComputedRef<import("../../../src/utils/date/range").DateRange[]>;
        attributeContext: import("vue").ComputedRef<import("../../../src/utils/date/range").DateRangeContext>;
        days: import("vue").ComputedRef<import("../../../src/utils/page").CalendarDay[]>;
        dayCells: import("vue").ComputedRef<import("@/use/calendar").DayCells>;
        count: import("vue").ComputedRef<number>;
        step: import("vue").ComputedRef<number>;
        firstPage: import("vue").ComputedRef<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        } | null>;
        lastPage: import("vue").ComputedRef<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        } | null>;
        canMovePrev: import("vue").ComputedRef<boolean>;
        canMoveNext: import("vue").ComputedRef<boolean>;
        minPage: import("vue").ComputedRef<import("../../../src/utils/page").PageAddress | null>;
        maxPage: import("vue").ComputedRef<import("../../../src/utils/page").PageAddress | null>;
        isMonthly: import("vue").ComputedRef<boolean>;
        isWeekly: import("vue").ComputedRef<boolean>;
        isDaily: import("vue").ComputedRef<boolean>;
        navVisibility: import("vue").ComputedRef<import("../../../src/utils/popovers").PopoverVisibility>;
        showWeeknumbers: import("vue").ComputedRef<boolean>;
        showIsoWeeknumbers: import("vue").ComputedRef<boolean>;
        getDateAddress: (date: import("../../../src/utils/date/helpers").DateSource) => import("../../../src/utils/page").PageAddress;
        canMove: (target: import("@/use/calendar").MoveTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => boolean;
        canMoveBy: (pages: number, opts?: Partial<import("@/use/calendar").MoveOptions>) => boolean;
        move: (target: import("@/use/calendar").MoveTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        moveBy: (pages: number, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        movePrev: () => Promise<boolean>;
        moveNext: () => Promise<boolean>;
        onTransitionBeforeEnter: () => void;
        onTransitionAfterEnter: () => void;
        tryFocusDate: (date: Date) => boolean;
        focusDate: (date: Date, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        onKeydown: (event: KeyboardEvent) => void;
        onDayKeydown: (day: import("../../../src/utils/page").CalendarDay, event: KeyboardEvent) => void;
        onDayClick: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayMouseenter: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayMouseleave: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayFocusin: (day: import("../../../src/utils/page").CalendarDay, event: FocusEvent | null) => void;
        onDayFocusout: (day: import("../../../src/utils/page").CalendarDay, event: FocusEvent) => void;
        onWeeknumberClick: (week: import("../../../src/utils/page").CalendarWeek, event: MouseEvent) => void;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {
        view: import("@/use/calendar").CalendarView;
        trimWeeks: boolean;
        titlePosition: import("../../../src/utils/page").TitlePosition;
        color: string;
        isDark: boolean | "system" | import("vue-screen-utils").DarkModeClassConfig;
        navVisibility: import("../../../src/utils/popovers").PopoverVisibility;
        rows: number;
        columns: number;
        expanded: boolean;
        borderless: boolean;
        transparent: boolean;
        initialPagePosition: number;
        disablePageSwipe: boolean;
    }, true, {}, {}, {
        CalendarHeader: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
            page: {
                type: import("vue").PropType<import("../../../src/utils/page").Page>;
                required: true;
            };
            layout: {
                type: import("vue").PropType<string>;
            };
            isLg: {
                type: import("vue").PropType<boolean>;
            };
            isXl: {
                type: import("vue").PropType<boolean>;
            };
            is2xl: {
                type: import("vue").PropType<boolean>;
            };
            hideTitle: {
                type: import("vue").PropType<boolean>;
            };
            hideArrows: {
                type: import("vue").PropType<boolean>;
            };
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
            page: {
                type: import("vue").PropType<import("../../../src/utils/page").Page>;
                required: true;
            };
            layout: {
                type: import("vue").PropType<string>;
            };
            isLg: {
                type: import("vue").PropType<boolean>;
            };
            isXl: {
                type: import("vue").PropType<boolean>;
            };
            is2xl: {
                type: import("vue").PropType<boolean>;
            };
            hideTitle: {
                type: import("vue").PropType<boolean>;
            };
            hideArrows: {
                type: import("vue").PropType<boolean>;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
        CalendarPage: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
        CalendarNavPopover: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
        CalendarDayPopover: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
        CalendarPageProvider: {
            new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("vue").ExtractPropTypes<{
                page: {
                    type: import("vue").PropType<import("../../../src/utils/page").Page>;
                    required: true;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                P: {};
                B: {};
                D: {};
                C: {};
                M: {};
                Defaults: {};
            }, Readonly<import("vue").ExtractPropTypes<{
                page: {
                    type: import("vue").PropType<import("../../../src/utils/page").Page>;
                    required: true;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, {}>;
            __isFragment?: undefined;
            __isTeleport?: undefined;
            __isSuspense?: undefined;
        } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            page: {
                type: import("vue").PropType<import("../../../src/utils/page").Page>;
                required: true;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
            $slots: {
                default?(_: {}): any;
            };
        });
        CalendarSlot: {
            new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("vue").ExtractPropTypes<{
                name: {
                    type: import("vue").PropType<import("../../../src/components/Calendar/CalendarSlot.vue").CalendarSlotName>;
                    required: true;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                P: {};
                B: {};
                D: {};
                C: {};
                M: {};
                Defaults: {};
            }, Readonly<import("vue").ExtractPropTypes<{
                name: {
                    type: import("vue").PropType<import("../../../src/components/Calendar/CalendarSlot.vue").CalendarSlotName>;
                    required: true;
                };
            }>> & Readonly<{}>, {}, {}, {}, {}, {}>;
            __isFragment?: undefined;
            __isTeleport?: undefined;
            __isSuspense?: undefined;
        } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            name: {
                type: import("vue").PropType<import("../../../src/components/Calendar/CalendarSlot.vue").CalendarSlotName>;
                required: true;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
            $slots: {
                default?(_: {}): any;
            };
        });
    } & import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        view: {
            type: import("vue").PropType<import("@/use/calendar").CalendarView>;
            default: string;
            validator(value: string): boolean;
        };
        rows: {
            type: NumberConstructor;
            default: number;
        };
        columns: {
            type: NumberConstructor;
            default: number;
        };
        step: NumberConstructor;
        titlePosition: {
            type: import("vue").PropType<import("../../../src/utils/page").TitlePosition>;
            default: () => import("../../../src/utils/page").TitlePosition;
        };
        navVisibility: {
            type: import("vue").PropType<import("../../../src/utils/popovers").PopoverVisibility>;
            default: () => import("../../../src/utils/popovers").PopoverVisibility;
        };
        showWeeknumbers: (BooleanConstructor | StringConstructor)[];
        showIsoWeeknumbers: (BooleanConstructor | StringConstructor)[];
        expanded: BooleanConstructor;
        borderless: BooleanConstructor;
        transparent: BooleanConstructor;
        initialPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        initialPagePosition: {
            type: NumberConstructor;
            default: number;
        };
        minPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        maxPage: import("vue").PropType<import("../../../src/utils/page").PageAddress>;
        transition: import("vue").PropType<import("@/use/calendar").MoveTransition>;
        attributes: import("vue").PropType<Partial<{
            key: string | number;
            hashcode: string;
            content: import("../../../src/utils/glyph").ContentConfig;
            highlight: import("../../../src/utils/glyph").HighlightConfig;
            dot: import("../../../src/utils/glyph").DotConfig;
            bar: import("../../../src/utils/glyph").BarConfig;
            popover: Partial<{
                label: string;
                visibility: import("../../../src/utils/popovers").PopoverVisibility;
                placement: import("@popperjs/core").Placement;
                hideIndicator: boolean;
                isInteractive: boolean;
            }>;
            event: Partial<{
                label: string;
            }>;
            dates: import("../../../src/utils/date/range").DateRangeSource[];
            customData: any;
            order: number;
            pinPage: boolean;
        }>[]>;
        trimWeeks: BooleanConstructor;
        disablePageSwipe: BooleanConstructor;
        color: {
            type: StringConstructor;
            default: () => any;
        };
        isDark: {
            type: import("vue").PropType<boolean | "system" | import("vue-screen-utils").DarkModeClassConfig>;
            default: () => any;
        };
        firstDayOfWeek: import("vue").PropType<import("../../../src/utils/date/helpers").DayOfWeek>;
        masks: ObjectConstructor;
        locale: import("vue").PropType<string | Record<string, any> | import("../../../src/utils/locale").default>;
        timezone: StringConstructor;
        minDate: null;
        maxDate: null;
        disabledDates: null;
    }>> & Readonly<{}>, {
        emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
        containerRef: import("vue").Ref<{
            querySelector: {
                <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
                <K_1 extends keyof SVGElementTagNameMap>(selectors: K_1): SVGElementTagNameMap[K_1] | null;
                <E extends Element = Element>(selectors: string): E | null;
            };
            addEventListener: Function;
            removeEventListener: Function;
            dispatchEvent: Function;
        } | null, (Pick<Element, "querySelector"> & import("../../../src/utils/helpers").CustomElement) | {
            querySelector: {
                <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
                <K_1 extends keyof SVGElementTagNameMap>(selectors: K_1): SVGElementTagNameMap[K_1] | null;
                <E extends Element = Element>(selectors: string): E | null;
            };
            addEventListener: Function;
            removeEventListener: Function;
            dispatchEvent: Function;
        } | null>;
        focusedDay: import("vue").Ref<{
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        } | null, import("../../../src/utils/page").CalendarDay | {
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../../src/utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        } | null>;
        inTransition: import("vue").Ref<boolean, boolean>;
        navPopoverId: import("vue").Ref<symbol, symbol>;
        dayPopoverId: import("vue").Ref<symbol, symbol>;
        view: import("vue").Ref<import("@/use/calendar").CalendarView, import("@/use/calendar").CalendarView>;
        pages: import("vue").Ref<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        }[], import("../../../src/utils/page").Page[] | {
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        }[]>;
        transitionName: import("vue").Ref<string, string>;
        theme: import("vue").ComputedRef<import("../../../src/utils/theme").Theme>;
        color: import("vue").ComputedRef<string>;
        displayMode: import("vue").ComputedRef<"light" | "dark">;
        locale: import("vue").ComputedRef<import("../../../src/utils/locale").default>;
        masks: import("vue").ComputedRef<any>;
        attributes: import("vue").ComputedRef<import("../../../src/utils/attribute").Attribute[]>;
        disabledAttribute: import("vue").ComputedRef<import("../../../src/utils/attribute").Attribute>;
        disabledDates: import("vue").ComputedRef<import("../../../src/utils/date/range").DateRange[]>;
        attributeContext: import("vue").ComputedRef<import("../../../src/utils/date/range").DateRangeContext>;
        days: import("vue").ComputedRef<import("../../../src/utils/page").CalendarDay[]>;
        dayCells: import("vue").ComputedRef<import("@/use/calendar").DayCells>;
        count: import("vue").ComputedRef<number>;
        step: import("vue").ComputedRef<number>;
        firstPage: import("vue").ComputedRef<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        } | null>;
        lastPage: import("vue").ComputedRef<{
            id: string;
            day?: number | undefined;
            week?: number | undefined;
            month: number;
            year: number;
            view: import("../../../src/utils/page").PageView;
            trimWeeks: boolean;
            position: number;
            row: number;
            rowFromEnd: number;
            column: number;
            columnFromEnd: number;
            showWeeknumbers: boolean;
            showIsoWeeknumbers: boolean;
            weeknumberPosition: string;
            monthTitle: string;
            weekTitle?: string | undefined;
            dayTitle?: string | undefined;
            title: string;
            titlePosition: import("../../../src/utils/page").TitlePosition;
            shortMonthLabel: string;
            monthLabel: string;
            shortYearLabel: string;
            yearLabel: string;
            monthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            prevMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            nextMonthComps: {
                firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                firstDayOfMonth: Date;
                inLeapYear: boolean;
                firstWeekday: number;
                numDays: number;
                numWeeks: number;
                month: number;
                year: number;
                weeknumbers: number[];
                isoWeeknumbers: number[];
            };
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            weeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
            weekdays: {
                weekday: number;
                label: string;
            }[];
            viewDays: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../../src/utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                    range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                    ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            viewWeeks: {
                id: string;
                week: number;
                weekPosition: number;
                weeknumber: number;
                isoWeeknumber: number;
                weeknumberDisplay?: number | undefined;
                days: {
                    id: string;
                    position: number;
                    label: string;
                    ariaLabel: string;
                    weekdayPosition: number;
                    weekdayPositionFromEnd: number;
                    weekPosition: number;
                    isoWeeknumber: number;
                    startDate: Date;
                    noonDate: Date;
                    endDate: Date;
                    isToday: boolean;
                    isFirstDay: boolean;
                    isLastDay: boolean;
                    isDisabled: boolean;
                    isFocusable: boolean;
                    isFocused: boolean;
                    inMonth: boolean;
                    inPrevMonth: boolean;
                    inNextMonth: boolean;
                    onTop: boolean;
                    onBottom: boolean;
                    onLeft: boolean;
                    onRight: boolean;
                    classes: (string | Object)[];
                    locale: {
                        id: any;
                        daysInWeek: number;
                        firstDayOfWeek: import("../../../src/utils/date/helpers").DayOfWeek;
                        masks: any;
                        timezone: string | undefined;
                        hourLabels: string[];
                        dayNames: string[];
                        dayNamesShort: string[];
                        dayNamesShorter: string[];
                        dayNamesNarrow: string[];
                        monthNames: string[];
                        monthNamesShort: string[];
                        relativeTimeNames: {
                            day?: string | undefined;
                            week?: string | undefined;
                            month?: string | undefined;
                            year?: string | undefined;
                            days?: string | undefined;
                            weeks?: string | undefined;
                            seconds?: string | undefined;
                            minutes?: string | undefined;
                            hours?: string | undefined;
                            months?: string | undefined;
                            years?: string | undefined;
                            quarter?: string | undefined;
                            quarters?: string | undefined;
                            hour?: string | undefined;
                            minute?: string | undefined;
                            second?: string | undefined;
                        };
                        amPm: [string, string];
                        monthCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/date/helpers").MonthParts>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            get: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                            getOrSet: (...args: any[]) => import("../../../src/utils/date/helpers").MonthParts;
                        };
                        pageCache: {
                            keys: string[];
                            store: Record<string, import("../../../src/utils/page").CachedPage>;
                            size: number;
                            createKey: (...args: any[]) => string;
                            createItem: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            get: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                            getOrSet: (...args: any[]) => import("../../../src/utils/page").CachedPage;
                        };
                        formatDate: (date: Date, masks: string | string[]) => string;
                        parseDate: (dateString: string, mask: string | string[]) => Date;
                        toDate: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date;
                        toDateOrNull: (d: Partial<import("../../../src/utils/date/helpers").SimpleDateParts> | import("../../../src/utils/date/helpers").DateSource, opts?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => Date | null;
                        fromDate: (date: Date | null, { type, mask }?: Partial<import("../../../src/utils/date/helpers").DateOptions>) => string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
                        range: (source: import("../../../src/utils/date/range").DateRangeSource) => import("../../../src/utils/date/range").DateRange;
                        ranges: (ranges: import("../../../src/utils/date/range").DateRangeSource | import("../../../src/utils/date/range").DateRangeSource[]) => import("../../../src/utils/date/range").DateRange[];
                        getDateParts: (date: Date) => import("../../../src/utils/date/helpers").DateParts;
                        getDateFromParts: (parts: Partial<import("../../../src/utils/date/helpers").SimpleDateParts>) => Date;
                        getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                        getPage: (config: import("../../../src/utils/page").PageConfig) => import("../../../src/utils/page").Page;
                        getMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getThisMonthParts: () => import("../../../src/utils/date/helpers").MonthParts;
                        getPrevMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getNextMonthParts: (month: number, year: number) => import("../../../src/utils/date/helpers").MonthParts;
                        getHourLabels: () => string[];
                        getDayId: (date: Date) => string;
                    };
                    dayIndex: number;
                    day: number;
                    dayFromEnd: number;
                    weekday: number;
                    weekdayOrdinal: number;
                    weekdayOrdinalFromEnd: number;
                    week: number;
                    weekFromEnd: number;
                    weeknumber: number;
                    month: number;
                    year: number;
                    date: Date;
                }[];
                title: string;
            }[];
        } | null>;
        canMovePrev: import("vue").ComputedRef<boolean>;
        canMoveNext: import("vue").ComputedRef<boolean>;
        minPage: import("vue").ComputedRef<import("../../../src/utils/page").PageAddress | null>;
        maxPage: import("vue").ComputedRef<import("../../../src/utils/page").PageAddress | null>;
        isMonthly: import("vue").ComputedRef<boolean>;
        isWeekly: import("vue").ComputedRef<boolean>;
        isDaily: import("vue").ComputedRef<boolean>;
        navVisibility: import("vue").ComputedRef<import("../../../src/utils/popovers").PopoverVisibility>;
        showWeeknumbers: import("vue").ComputedRef<boolean>;
        showIsoWeeknumbers: import("vue").ComputedRef<boolean>;
        getDateAddress: (date: import("../../../src/utils/date/helpers").DateSource) => import("../../../src/utils/page").PageAddress;
        canMove: (target: import("@/use/calendar").MoveTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => boolean;
        canMoveBy: (pages: number, opts?: Partial<import("@/use/calendar").MoveOptions>) => boolean;
        move: (target: import("@/use/calendar").MoveTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        moveBy: (pages: number, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        movePrev: () => Promise<boolean>;
        moveNext: () => Promise<boolean>;
        onTransitionBeforeEnter: () => void;
        onTransitionAfterEnter: () => void;
        tryFocusDate: (date: Date) => boolean;
        focusDate: (date: Date, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
        onKeydown: (event: KeyboardEvent) => void;
        onDayKeydown: (day: import("../../../src/utils/page").CalendarDay, event: KeyboardEvent) => void;
        onDayClick: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayMouseenter: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayMouseleave: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
        onDayFocusin: (day: import("../../../src/utils/page").CalendarDay, event: FocusEvent | null) => void;
        onDayFocusout: (day: import("../../../src/utils/page").CalendarDay, event: FocusEvent) => void;
        onWeeknumberClick: (week: import("../../../src/utils/page").CalendarWeek, event: MouseEvent) => void;
    }, {}, {}, {}, {
        view: import("@/use/calendar").CalendarView;
        trimWeeks: boolean;
        titlePosition: import("../../../src/utils/page").TitlePosition;
        color: string;
        isDark: boolean | "system" | import("vue-screen-utils").DarkModeClassConfig;
        navVisibility: import("../../../src/utils/popovers").PopoverVisibility;
        rows: number;
        columns: number;
        expanded: boolean;
        borderless: boolean;
        transparent: boolean;
        initialPagePosition: number;
        disablePageSwipe: boolean;
    }> | null;
    isRange: boolean;
    isTimeMode: boolean;
    isDateTimeMode: boolean;
    is24hr: boolean;
    hideTimeHeader: boolean;
    timeAccuracy: number;
    isDragging: boolean;
    inputValue: string | {
        start: string;
        end: string;
    };
    inputEvents: {
        click?: ((e: MouseEvent) => void) | undefined;
        mousemove?: ((e: MouseEvent) => void) | undefined;
        mouseleave?: ((e: MouseEvent) => void) | undefined;
        focusin?: ((e: MouseEvent) => void) | undefined;
        focusout?: ((e: MouseEvent) => void) | undefined;
        input: (e: InputEvent) => void;
        change: (e: InputEvent) => void;
        keyup: (e: KeyboardEvent) => void;
    } | {
        start: {
            click?: ((e: MouseEvent) => void) | undefined;
            mousemove?: ((e: MouseEvent) => void) | undefined;
            mouseleave?: ((e: MouseEvent) => void) | undefined;
            focusin?: ((e: MouseEvent) => void) | undefined;
            focusout?: ((e: MouseEvent) => void) | undefined;
            input: (e: InputEvent) => void;
            change: (e: InputEvent) => void;
            keyup: (e: KeyboardEvent) => void;
        };
        end: {
            click?: ((e: MouseEvent) => void) | undefined;
            mousemove?: ((e: MouseEvent) => void) | undefined;
            mouseleave?: ((e: MouseEvent) => void) | undefined;
            focusin?: ((e: MouseEvent) => void) | undefined;
            focusout?: ((e: MouseEvent) => void) | undefined;
            input: (e: InputEvent) => void;
            change: (e: InputEvent) => void;
            keyup: (e: KeyboardEvent) => void;
        };
    };
    dateParts: (import("../../../src/utils/date/helpers").DateParts | null)[];
    attributes: any[];
    rules: import("../../../src/utils/date/helpers").DatePartsRules[];
    move: (target: import("@/use/calendar").MoveTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
    moveBy: (pages: number, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
    moveToValue: (target: import("@/use/datePicker").ValueTarget, opts?: Partial<import("@/use/calendar").MoveOptions>) => Promise<boolean>;
    updateValue: (value: any, opts?: Partial<import("@/use/datePicker").UpdateOptions>) => Promise<string | number | Date | import("../../../src/utils/date/helpers").DateParts | {
        start: string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
        end: string | number | Date | import("../../../src/utils/date/helpers").DateParts | null;
    } | null>;
    showPopover: (opts?: Partial<import("../../../src/utils/popovers").PopoverOptions>) => void;
    hidePopover: (opts?: Partial<import("../../../src/utils/popovers").PopoverOptions>) => void;
    togglePopover: (opts: Partial<import("../../../src/utils/popovers").PopoverOptions>) => void;
    onDayClick: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
    onDayKeydown: (day: import("../../../src/utils/page").CalendarDay, event: KeyboardEvent) => void;
    onDayMouseEnter: (day: import("../../../src/utils/page").CalendarDay, event: MouseEvent) => void;
    onPopoverBeforeShow: (el: HTMLElement) => void;
    onPopoverAfterShow: (el: HTMLElement) => void;
    onPopoverBeforeHide: (el: HTMLElement) => void;
    onPopoverAfterHide: (el: HTMLElement) => void;
    color: string;
    isDark: boolean | "system" | import("vue-screen-utils").DarkModeClassConfig;
    displayMode: "light" | "dark";
    theme: import("../../../src/utils/theme").Theme;
    locale: import("../../../src/utils/locale").default;
    masks: any;
    minDate: any;
    maxDate: any;
    disabledDates: import("../../../src/utils/date/range").DateRange[];
    disabledAttribute: import("../../../src/utils/attribute").Attribute;
} & {
    $: import("vue").ComponentInternalInstance;
    $data: {};
    $props: {};
    $attrs: {
        [x: string]: unknown;
    };
    $refs: {
        [x: string]: unknown;
    };
    $slots: Readonly<{
        [name: string]: import("vue").Slot<any> | undefined;
    }>;
    $root: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import("vue").ComponentProvideOptions>, {}, {}, "", {}, any> | null;
    $parent: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import("vue").ComponentProvideOptions>, {}, {}, "", {}, any> | null;
    $host: Element | null;
    $emit: (event: string, ...args: any[]) => void;
    $el: any;
    $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import("vue").ComponentProvideOptions> & {
        beforeCreate?: ((() => void) | (() => void)[]) | undefined;
        created?: ((() => void) | (() => void)[]) | undefined;
        beforeMount?: ((() => void) | (() => void)[]) | undefined;
        mounted?: ((() => void) | (() => void)[]) | undefined;
        beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
        updated?: ((() => void) | (() => void)[]) | undefined;
        activated?: ((() => void) | (() => void)[]) | undefined;
        deactivated?: ((() => void) | (() => void)[]) | undefined;
        beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
        beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
        destroyed?: ((() => void) | (() => void)[]) | undefined;
        unmounted?: ((() => void) | (() => void)[]) | undefined;
        renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
        renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
        errorCaptured?: (((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import("vue").ComponentProvideOptions>, {}, {}, "", {}, any> | null, info: string) => boolean | void) | ((err: unknown, instance: ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import("vue").ComponentProvideOptions>, {}, {}, "", {}, any> | null, info: string) => boolean | void)[]) | undefined;
    };
    $forceUpdate: () => void;
    $nextTick: typeof import("vue").nextTick;
    $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R, args_2: import("@vue/reactivity").OnCleanup) => any : (args_0: any, args_1: any, args_2: import("@vue/reactivity").OnCleanup) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
} & Readonly<{}> & Omit<{}, never> & import("vue").ShallowUnwrapRef<{}> & {} & import("vue").ComponentCustomProperties & {}>;
export declare function updateInputs(dp: VueWrapper<DatePickerComponent>, startValue: string, endValue?: string): Promise<unknown>;
