declare const _default: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    view: {
        type: import("vue").PropType<import("../../use/calendar").CalendarView>;
        default: string;
        validator(value: string): boolean;
    };
    rows: {
        type: NumberConstructor;
        default: number;
    };
    columns: {
        type: NumberConstructor;
        default: number;
    };
    step: NumberConstructor;
    titlePosition: {
        type: import("vue").PropType<import("../../utils/page").TitlePosition>;
        default: () => import("../../utils/page").TitlePosition;
    };
    navVisibility: {
        type: import("vue").PropType<import("../../utils/popovers").PopoverVisibility>;
        default: () => import("../../utils/popovers").PopoverVisibility;
    };
    showWeeknumbers: (BooleanConstructor | StringConstructor)[];
    showIsoWeeknumbers: (BooleanConstructor | StringConstructor)[];
    expanded: BooleanConstructor;
    borderless: BooleanConstructor;
    transparent: BooleanConstructor;
    initialPage: import("vue").PropType<import("../../utils/page").PageAddress>;
    initialPagePosition: {
        type: NumberConstructor;
        default: number;
    };
    minPage: import("vue").PropType<import("../../utils/page").PageAddress>;
    maxPage: import("vue").PropType<import("../../utils/page").PageAddress>;
    transition: import("vue").PropType<import("../../use/calendar").MoveTransition>;
    attributes: import("vue").PropType<Partial<{
        key: string | number;
        hashcode: string;
        content: import("../../utils/glyph").ContentConfig;
        highlight: import("../../utils/glyph").HighlightConfig;
        dot: import("../../utils/glyph").DotConfig;
        bar: import("../../utils/glyph").BarConfig;
        popover: Partial<{
            label: string;
            visibility: import("../../utils/popovers").PopoverVisibility;
            placement: import("@popperjs/core").Placement;
            hideIndicator: boolean;
            isInteractive: boolean;
        }>;
        event: Partial<{
            label: string;
        }>;
        dates: import("../../utils/date/range").DateRangeSource[];
        customData: any;
        order: number;
        pinPage: boolean;
    }>[]>;
    trimWeeks: BooleanConstructor;
    disablePageSwipe: BooleanConstructor;
    color: {
        type: StringConstructor;
        default: () => any;
    };
    isDark: {
        type: import("vue").PropType<boolean | "system" | import("vue-screen-utils").DarkModeClassConfig>;
        default: () => any;
    };
    firstDayOfWeek: import("vue").PropType<import("../../utils/date/helpers").DayOfWeek>;
    masks: ObjectConstructor;
    locale: import("vue").PropType<string | Record<string, any> | import("../../utils/locale").default>;
    timezone: StringConstructor;
    minDate: null;
    maxDate: null;
    disabledDates: null;
}>, {
    emit: ((event: string, ...args: any[]) => void) | ((event: string, ...args: any[]) => void);
    containerRef: import("vue").Ref<{
        querySelector: {
            <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
            <K_1 extends keyof SVGElementTagNameMap>(selectors: K_1): SVGElementTagNameMap[K_1] | null;
            <E extends Element = Element>(selectors: string): E | null;
        };
        addEventListener: Function;
        removeEventListener: Function;
        dispatchEvent: Function;
    } | null, (Pick<Element, "querySelector"> & import("../../utils/helpers").CustomElement) | {
        querySelector: {
            <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
            <K_1 extends keyof SVGElementTagNameMap>(selectors: K_1): SVGElementTagNameMap[K_1] | null;
            <E extends Element = Element>(selectors: string): E | null;
        };
        addEventListener: Function;
        removeEventListener: Function;
        dispatchEvent: Function;
    } | null>;
    focusedDay: import("vue").Ref<{
        id: string;
        position: number;
        label: string;
        ariaLabel: string;
        weekdayPosition: number;
        weekdayPositionFromEnd: number;
        weekPosition: number;
        isoWeeknumber: number;
        startDate: Date;
        noonDate: Date;
        endDate: Date;
        isToday: boolean;
        isFirstDay: boolean;
        isLastDay: boolean;
        isDisabled: boolean;
        isFocusable: boolean;
        isFocused: boolean;
        inMonth: boolean;
        inPrevMonth: boolean;
        inNextMonth: boolean;
        onTop: boolean;
        onBottom: boolean;
        onLeft: boolean;
        onRight: boolean;
        classes: (string | Object)[];
        locale: {
            id: any;
            daysInWeek: number;
            firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
            masks: any;
            timezone: string | undefined;
            hourLabels: string[];
            dayNames: string[];
            dayNamesShort: string[];
            dayNamesShorter: string[];
            dayNamesNarrow: string[];
            monthNames: string[];
            monthNamesShort: string[];
            relativeTimeNames: {
                day?: string | undefined;
                week?: string | undefined;
                month?: string | undefined;
                year?: string | undefined;
                days?: string | undefined;
                weeks?: string | undefined;
                seconds?: string | undefined;
                minutes?: string | undefined;
                hours?: string | undefined;
                months?: string | undefined;
                years?: string | undefined;
                quarter?: string | undefined;
                quarters?: string | undefined;
                hour?: string | undefined;
                minute?: string | undefined;
                second?: string | undefined;
            };
            amPm: [string, string];
            monthCache: {
                keys: string[];
                store: Record<string, import("../../utils/date/helpers").MonthParts>;
                size: number;
                createKey: (...args: any[]) => string;
                createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
            };
            pageCache: {
                keys: string[];
                store: Record<string, import("../../utils/page").CachedPage>;
                size: number;
                createKey: (...args: any[]) => string;
                createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                get: (...args: any[]) => import("../../utils/page").CachedPage;
                getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
            };
            formatDate: (date: Date, masks: string | string[]) => string;
            parseDate: (dateString: string, mask: string | string[]) => Date;
            toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
            toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
            fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
            range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
            ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
            getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
            getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
            getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
            getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
            getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
            getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
            getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
            getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
            getHourLabels: () => string[];
            getDayId: (date: Date) => string;
        };
        dayIndex: number;
        day: number;
        dayFromEnd: number;
        weekday: number;
        weekdayOrdinal: number;
        weekdayOrdinalFromEnd: number;
        week: number;
        weekFromEnd: number;
        weeknumber: number;
        month: number;
        year: number;
        date: Date;
    } | null, import("../../utils/page").CalendarDay | {
        id: string;
        position: number;
        label: string;
        ariaLabel: string;
        weekdayPosition: number;
        weekdayPositionFromEnd: number;
        weekPosition: number;
        isoWeeknumber: number;
        startDate: Date;
        noonDate: Date;
        endDate: Date;
        isToday: boolean;
        isFirstDay: boolean;
        isLastDay: boolean;
        isDisabled: boolean;
        isFocusable: boolean;
        isFocused: boolean;
        inMonth: boolean;
        inPrevMonth: boolean;
        inNextMonth: boolean;
        onTop: boolean;
        onBottom: boolean;
        onLeft: boolean;
        onRight: boolean;
        classes: (string | Object)[];
        locale: {
            id: any;
            daysInWeek: number;
            firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
            masks: any;
            timezone: string | undefined;
            hourLabels: string[];
            dayNames: string[];
            dayNamesShort: string[];
            dayNamesShorter: string[];
            dayNamesNarrow: string[];
            monthNames: string[];
            monthNamesShort: string[];
            relativeTimeNames: {
                day?: string | undefined;
                week?: string | undefined;
                month?: string | undefined;
                year?: string | undefined;
                days?: string | undefined;
                weeks?: string | undefined;
                seconds?: string | undefined;
                minutes?: string | undefined;
                hours?: string | undefined;
                months?: string | undefined;
                years?: string | undefined;
                quarter?: string | undefined;
                quarters?: string | undefined;
                hour?: string | undefined;
                minute?: string | undefined;
                second?: string | undefined;
            };
            amPm: [string, string];
            monthCache: {
                keys: string[];
                store: Record<string, import("../../utils/date/helpers").MonthParts>;
                size: number;
                createKey: (...args: any[]) => string;
                createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
            };
            pageCache: {
                keys: string[];
                store: Record<string, import("../../utils/page").CachedPage>;
                size: number;
                createKey: (...args: any[]) => string;
                createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                get: (...args: any[]) => import("../../utils/page").CachedPage;
                getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
            };
            formatDate: (date: Date, masks: string | string[]) => string;
            parseDate: (dateString: string, mask: string | string[]) => Date;
            toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
            toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
            fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
            range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
            ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
            getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
            getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
            getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
            getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
            getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
            getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
            getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
            getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
            getHourLabels: () => string[];
            getDayId: (date: Date) => string;
        };
        dayIndex: number;
        day: number;
        dayFromEnd: number;
        weekday: number;
        weekdayOrdinal: number;
        weekdayOrdinalFromEnd: number;
        week: number;
        weekFromEnd: number;
        weeknumber: number;
        month: number;
        year: number;
        date: Date;
    } | null>;
    inTransition: import("vue").Ref<boolean, boolean>;
    navPopoverId: import("vue").Ref<symbol, symbol>;
    dayPopoverId: import("vue").Ref<symbol, symbol>;
    view: import("vue").Ref<import("../../use/calendar").CalendarView, import("../../use/calendar").CalendarView>;
    pages: import("vue").Ref<{
        id: string;
        day?: number | undefined;
        week?: number | undefined;
        month: number;
        year: number;
        view: import("../../utils/page").PageView;
        trimWeeks: boolean;
        position: number;
        row: number;
        rowFromEnd: number;
        column: number;
        columnFromEnd: number;
        showWeeknumbers: boolean;
        showIsoWeeknumbers: boolean;
        weeknumberPosition: string;
        monthTitle: string;
        weekTitle?: string | undefined;
        dayTitle?: string | undefined;
        title: string;
        titlePosition: import("../../utils/page").TitlePosition;
        shortMonthLabel: string;
        monthLabel: string;
        shortYearLabel: string;
        yearLabel: string;
        monthComps: {
            firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
            firstDayOfMonth: Date;
            inLeapYear: boolean;
            firstWeekday: number;
            numDays: number;
            numWeeks: number;
            month: number;
            year: number;
            weeknumbers: number[];
            isoWeeknumbers: number[];
        };
        prevMonthComps: {
            firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
            firstDayOfMonth: Date;
            inLeapYear: boolean;
            firstWeekday: number;
            numDays: number;
            numWeeks: number;
            month: number;
            year: number;
            weeknumbers: number[];
            isoWeeknumbers: number[];
        };
        nextMonthComps: {
            firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
            firstDayOfMonth: Date;
            inLeapYear: boolean;
            firstWeekday: number;
            numDays: number;
            numWeeks: number;
            month: number;
            year: number;
            weeknumbers: number[];
            isoWeeknumbers: number[];
        };
        days: {
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                    get: (...args: any[]) => import("../../utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
                range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
                ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        }[];
        weeks: {
            id: string;
            week: number;
            weekPosition: number;
            weeknumber: number;
            isoWeeknumber: number;
            weeknumberDisplay?: number | undefined;
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                        get: (...args: any[]) => import("../../utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
                    range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
                    ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            title: string;
        }[];
        weekdays: {
            weekday: number;
            label: string;
        }[];
        viewDays: {
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                    get: (...args: any[]) => import("../../utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
                range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
                ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        }[];
        viewWeeks: {
            id: string;
            week: number;
            weekPosition: number;
            weeknumber: number;
            isoWeeknumber: number;
            weeknumberDisplay?: number | undefined;
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                        get: (...args: any[]) => import("../../utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
                    range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
                    ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            title: string;
        }[];
    }[], import("../../utils/page").Page[] | {
        id: string;
        day?: number | undefined;
        week?: number | undefined;
        month: number;
        year: number;
        view: import("../../utils/page").PageView;
        trimWeeks: boolean;
        position: number;
        row: number;
        rowFromEnd: number;
        column: number;
        columnFromEnd: number;
        showWeeknumbers: boolean;
        showIsoWeeknumbers: boolean;
        weeknumberPosition: string;
        monthTitle: string;
        weekTitle?: string | undefined;
        dayTitle?: string | undefined;
        title: string;
        titlePosition: import("../../utils/page").TitlePosition;
        shortMonthLabel: string;
        monthLabel: string;
        shortYearLabel: string;
        yearLabel: string;
        monthComps: {
            firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
            firstDayOfMonth: Date;
            inLeapYear: boolean;
            firstWeekday: number;
            numDays: number;
            numWeeks: number;
            month: number;
            year: number;
            weeknumbers: number[];
            isoWeeknumbers: number[];
        };
        prevMonthComps: {
            firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
            firstDayOfMonth: Date;
            inLeapYear: boolean;
            firstWeekday: number;
            numDays: number;
            numWeeks: number;
            month: number;
            year: number;
            weeknumbers: number[];
            isoWeeknumbers: number[];
        };
        nextMonthComps: {
            firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
            firstDayOfMonth: Date;
            inLeapYear: boolean;
            firstWeekday: number;
            numDays: number;
            numWeeks: number;
            month: number;
            year: number;
            weeknumbers: number[];
            isoWeeknumbers: number[];
        };
        days: {
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                    get: (...args: any[]) => import("../../utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
                range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
                ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        }[];
        weeks: {
            id: string;
            week: number;
            weekPosition: number;
            weeknumber: number;
            isoWeeknumber: number;
            weeknumberDisplay?: number | undefined;
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                        get: (...args: any[]) => import("../../utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
                    range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
                    ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            title: string;
        }[];
        weekdays: {
            weekday: number;
            label: string;
        }[];
        viewDays: {
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                    get: (...args: any[]) => import("../../utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
                range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
                ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        }[];
        viewWeeks: {
            id: string;
            week: number;
            weekPosition: number;
            weeknumber: number;
            isoWeeknumber: number;
            weeknumberDisplay?: number | undefined;
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                        get: (...args: any[]) => import("../../utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
                    range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
                    ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            title: string;
        }[];
    }[]>;
    transitionName: import("vue").Ref<string, string>;
    theme: import("vue").ComputedRef<import("../../utils/theme").Theme>;
    color: import("vue").ComputedRef<string>;
    displayMode: import("vue").ComputedRef<"light" | "dark">;
    locale: import("vue").ComputedRef<import("../../utils/locale").default>;
    masks: import("vue").ComputedRef<any>;
    attributes: import("vue").ComputedRef<import("../../utils/attribute").Attribute[]>;
    disabledAttribute: import("vue").ComputedRef<import("../../utils/attribute").Attribute>;
    disabledDates: import("vue").ComputedRef<import("../../utils/date/range").DateRange[]>;
    attributeContext: import("vue").ComputedRef<import("../../utils/date/range").DateRangeContext>;
    days: import("vue").ComputedRef<import("../../utils/page").CalendarDay[]>;
    dayCells: import("vue").ComputedRef<import("../../use/calendar").DayCells>;
    count: import("vue").ComputedRef<number>;
    step: import("vue").ComputedRef<number>;
    firstPage: import("vue").ComputedRef<{
        id: string;
        day?: number | undefined;
        week?: number | undefined;
        month: number;
        year: number;
        view: import("../../utils/page").PageView;
        trimWeeks: boolean;
        position: number;
        row: number;
        rowFromEnd: number;
        column: number;
        columnFromEnd: number;
        showWeeknumbers: boolean;
        showIsoWeeknumbers: boolean;
        weeknumberPosition: string;
        monthTitle: string;
        weekTitle?: string | undefined;
        dayTitle?: string | undefined;
        title: string;
        titlePosition: import("../../utils/page").TitlePosition;
        shortMonthLabel: string;
        monthLabel: string;
        shortYearLabel: string;
        yearLabel: string;
        monthComps: {
            firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
            firstDayOfMonth: Date;
            inLeapYear: boolean;
            firstWeekday: number;
            numDays: number;
            numWeeks: number;
            month: number;
            year: number;
            weeknumbers: number[];
            isoWeeknumbers: number[];
        };
        prevMonthComps: {
            firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
            firstDayOfMonth: Date;
            inLeapYear: boolean;
            firstWeekday: number;
            numDays: number;
            numWeeks: number;
            month: number;
            year: number;
            weeknumbers: number[];
            isoWeeknumbers: number[];
        };
        nextMonthComps: {
            firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
            firstDayOfMonth: Date;
            inLeapYear: boolean;
            firstWeekday: number;
            numDays: number;
            numWeeks: number;
            month: number;
            year: number;
            weeknumbers: number[];
            isoWeeknumbers: number[];
        };
        days: {
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                    get: (...args: any[]) => import("../../utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
                range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
                ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        }[];
        weeks: {
            id: string;
            week: number;
            weekPosition: number;
            weeknumber: number;
            isoWeeknumber: number;
            weeknumberDisplay?: number | undefined;
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                        get: (...args: any[]) => import("../../utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
                    range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
                    ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            title: string;
        }[];
        weekdays: {
            weekday: number;
            label: string;
        }[];
        viewDays: {
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                    get: (...args: any[]) => import("../../utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
                range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
                ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        }[];
        viewWeeks: {
            id: string;
            week: number;
            weekPosition: number;
            weeknumber: number;
            isoWeeknumber: number;
            weeknumberDisplay?: number | undefined;
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                        get: (...args: any[]) => import("../../utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
                    range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
                    ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            title: string;
        }[];
    } | null>;
    lastPage: import("vue").ComputedRef<{
        id: string;
        day?: number | undefined;
        week?: number | undefined;
        month: number;
        year: number;
        view: import("../../utils/page").PageView;
        trimWeeks: boolean;
        position: number;
        row: number;
        rowFromEnd: number;
        column: number;
        columnFromEnd: number;
        showWeeknumbers: boolean;
        showIsoWeeknumbers: boolean;
        weeknumberPosition: string;
        monthTitle: string;
        weekTitle?: string | undefined;
        dayTitle?: string | undefined;
        title: string;
        titlePosition: import("../../utils/page").TitlePosition;
        shortMonthLabel: string;
        monthLabel: string;
        shortYearLabel: string;
        yearLabel: string;
        monthComps: {
            firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
            firstDayOfMonth: Date;
            inLeapYear: boolean;
            firstWeekday: number;
            numDays: number;
            numWeeks: number;
            month: number;
            year: number;
            weeknumbers: number[];
            isoWeeknumbers: number[];
        };
        prevMonthComps: {
            firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
            firstDayOfMonth: Date;
            inLeapYear: boolean;
            firstWeekday: number;
            numDays: number;
            numWeeks: number;
            month: number;
            year: number;
            weeknumbers: number[];
            isoWeeknumbers: number[];
        };
        nextMonthComps: {
            firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
            firstDayOfMonth: Date;
            inLeapYear: boolean;
            firstWeekday: number;
            numDays: number;
            numWeeks: number;
            month: number;
            year: number;
            weeknumbers: number[];
            isoWeeknumbers: number[];
        };
        days: {
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                    get: (...args: any[]) => import("../../utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
                range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
                ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        }[];
        weeks: {
            id: string;
            week: number;
            weekPosition: number;
            weeknumber: number;
            isoWeeknumber: number;
            weeknumberDisplay?: number | undefined;
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                        get: (...args: any[]) => import("../../utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
                    range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
                    ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            title: string;
        }[];
        weekdays: {
            weekday: number;
            label: string;
        }[];
        viewDays: {
            id: string;
            position: number;
            label: string;
            ariaLabel: string;
            weekdayPosition: number;
            weekdayPositionFromEnd: number;
            weekPosition: number;
            isoWeeknumber: number;
            startDate: Date;
            noonDate: Date;
            endDate: Date;
            isToday: boolean;
            isFirstDay: boolean;
            isLastDay: boolean;
            isDisabled: boolean;
            isFocusable: boolean;
            isFocused: boolean;
            inMonth: boolean;
            inPrevMonth: boolean;
            inNextMonth: boolean;
            onTop: boolean;
            onBottom: boolean;
            onLeft: boolean;
            onRight: boolean;
            classes: (string | Object)[];
            locale: {
                id: any;
                daysInWeek: number;
                firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
                masks: any;
                timezone: string | undefined;
                hourLabels: string[];
                dayNames: string[];
                dayNamesShort: string[];
                dayNamesShorter: string[];
                dayNamesNarrow: string[];
                monthNames: string[];
                monthNamesShort: string[];
                relativeTimeNames: {
                    day?: string | undefined;
                    week?: string | undefined;
                    month?: string | undefined;
                    year?: string | undefined;
                    days?: string | undefined;
                    weeks?: string | undefined;
                    seconds?: string | undefined;
                    minutes?: string | undefined;
                    hours?: string | undefined;
                    months?: string | undefined;
                    years?: string | undefined;
                    quarter?: string | undefined;
                    quarters?: string | undefined;
                    hour?: string | undefined;
                    minute?: string | undefined;
                    second?: string | undefined;
                };
                amPm: [string, string];
                monthCache: {
                    keys: string[];
                    store: Record<string, import("../../utils/date/helpers").MonthParts>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                };
                pageCache: {
                    keys: string[];
                    store: Record<string, import("../../utils/page").CachedPage>;
                    size: number;
                    createKey: (...args: any[]) => string;
                    createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                    get: (...args: any[]) => import("../../utils/page").CachedPage;
                    getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
                };
                formatDate: (date: Date, masks: string | string[]) => string;
                parseDate: (dateString: string, mask: string | string[]) => Date;
                toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
                toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
                fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
                range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
                ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
                getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
                getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
                getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
                getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
                getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                getHourLabels: () => string[];
                getDayId: (date: Date) => string;
            };
            dayIndex: number;
            day: number;
            dayFromEnd: number;
            weekday: number;
            weekdayOrdinal: number;
            weekdayOrdinalFromEnd: number;
            week: number;
            weekFromEnd: number;
            weeknumber: number;
            month: number;
            year: number;
            date: Date;
        }[];
        viewWeeks: {
            id: string;
            week: number;
            weekPosition: number;
            weeknumber: number;
            isoWeeknumber: number;
            weeknumberDisplay?: number | undefined;
            days: {
                id: string;
                position: number;
                label: string;
                ariaLabel: string;
                weekdayPosition: number;
                weekdayPositionFromEnd: number;
                weekPosition: number;
                isoWeeknumber: number;
                startDate: Date;
                noonDate: Date;
                endDate: Date;
                isToday: boolean;
                isFirstDay: boolean;
                isLastDay: boolean;
                isDisabled: boolean;
                isFocusable: boolean;
                isFocused: boolean;
                inMonth: boolean;
                inPrevMonth: boolean;
                inNextMonth: boolean;
                onTop: boolean;
                onBottom: boolean;
                onLeft: boolean;
                onRight: boolean;
                classes: (string | Object)[];
                locale: {
                    id: any;
                    daysInWeek: number;
                    firstDayOfWeek: import("../../utils/date/helpers").DayOfWeek;
                    masks: any;
                    timezone: string | undefined;
                    hourLabels: string[];
                    dayNames: string[];
                    dayNamesShort: string[];
                    dayNamesShorter: string[];
                    dayNamesNarrow: string[];
                    monthNames: string[];
                    monthNamesShort: string[];
                    relativeTimeNames: {
                        day?: string | undefined;
                        week?: string | undefined;
                        month?: string | undefined;
                        year?: string | undefined;
                        days?: string | undefined;
                        weeks?: string | undefined;
                        seconds?: string | undefined;
                        minutes?: string | undefined;
                        hours?: string | undefined;
                        months?: string | undefined;
                        years?: string | undefined;
                        quarter?: string | undefined;
                        quarters?: string | undefined;
                        hour?: string | undefined;
                        minute?: string | undefined;
                        second?: string | undefined;
                    };
                    amPm: [string, string];
                    monthCache: {
                        keys: string[];
                        store: Record<string, import("../../utils/date/helpers").MonthParts>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                        get: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                        getOrSet: (...args: any[]) => import("../../utils/date/helpers").MonthParts;
                    };
                    pageCache: {
                        keys: string[];
                        store: Record<string, import("../../utils/page").CachedPage>;
                        size: number;
                        createKey: (...args: any[]) => string;
                        createItem: (...args: any[]) => import("../../utils/page").CachedPage;
                        get: (...args: any[]) => import("../../utils/page").CachedPage;
                        getOrSet: (...args: any[]) => import("../../utils/page").CachedPage;
                    };
                    formatDate: (date: Date, masks: string | string[]) => string;
                    parseDate: (dateString: string, mask: string | string[]) => Date;
                    toDate: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date;
                    toDateOrNull: (d: Partial<import("../../utils/date/helpers").SimpleDateParts> | import("../../utils/date/helpers").DateSource, opts?: Partial<import("../../utils/date/helpers").DateOptions>) => Date | null;
                    fromDate: (date: Date | null, { type, mask }?: Partial<import("../../utils/date/helpers").DateOptions>) => string | number | Date | import("../../utils/date/helpers").DateParts | null;
                    range: (source: import("../../utils/date/range").DateRangeSource) => import("../../utils/date/range").DateRange;
                    ranges: (ranges: import("../../utils/date/range").DateRangeSource | import("../../utils/date/range").DateRangeSource[]) => import("../../utils/date/range").DateRange[];
                    getDateParts: (date: Date) => import("../../utils/date/helpers").DateParts;
                    getDateFromParts: (parts: Partial<import("../../utils/date/helpers").SimpleDateParts>) => Date;
                    getDateFromParams: (year: number, month: number, day: number, hours: number, minutes: number, seconds: number, milliseconds: number) => Date;
                    getPage: (config: import("../../utils/page").PageConfig) => import("../../utils/page").Page;
                    getMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getThisMonthParts: () => import("../../utils/date/helpers").MonthParts;
                    getPrevMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getNextMonthParts: (month: number, year: number) => import("../../utils/date/helpers").MonthParts;
                    getHourLabels: () => string[];
                    getDayId: (date: Date) => string;
                };
                dayIndex: number;
                day: number;
                dayFromEnd: number;
                weekday: number;
                weekdayOrdinal: number;
                weekdayOrdinalFromEnd: number;
                week: number;
                weekFromEnd: number;
                weeknumber: number;
                month: number;
                year: number;
                date: Date;
            }[];
            title: string;
        }[];
    } | null>;
    canMovePrev: import("vue").ComputedRef<boolean>;
    canMoveNext: import("vue").ComputedRef<boolean>;
    minPage: import("vue").ComputedRef<import("../../utils/page").PageAddress | null>;
    maxPage: import("vue").ComputedRef<import("../../utils/page").PageAddress | null>;
    isMonthly: import("vue").ComputedRef<boolean>;
    isWeekly: import("vue").ComputedRef<boolean>;
    isDaily: import("vue").ComputedRef<boolean>;
    navVisibility: import("vue").ComputedRef<import("../../utils/popovers").PopoverVisibility>;
    showWeeknumbers: import("vue").ComputedRef<boolean>;
    showIsoWeeknumbers: import("vue").ComputedRef<boolean>;
    getDateAddress: (date: import("../../utils/date/helpers").DateSource) => import("../../utils/page").PageAddress;
    canMove: (target: import("../../use/calendar").MoveTarget, opts?: Partial<import("../../use/calendar").MoveOptions>) => boolean;
    canMoveBy: (pages: number, opts?: Partial<import("../../use/calendar").MoveOptions>) => boolean;
    move: (target: import("../../use/calendar").MoveTarget, opts?: Partial<import("../../use/calendar").MoveOptions>) => Promise<boolean>;
    moveBy: (pages: number, opts?: Partial<import("../../use/calendar").MoveOptions>) => Promise<boolean>;
    movePrev: () => Promise<boolean>;
    moveNext: () => Promise<boolean>;
    onTransitionBeforeEnter: () => void;
    onTransitionAfterEnter: () => void;
    tryFocusDate: (date: Date) => boolean;
    focusDate: (date: Date, opts?: Partial<import("../../use/calendar").MoveOptions>) => Promise<boolean>;
    onKeydown: (event: KeyboardEvent) => void;
    onDayKeydown: (day: import("../../utils/page").CalendarDay, event: KeyboardEvent) => void;
    onDayClick: (day: import("../../utils/page").CalendarDay, event: MouseEvent) => void;
    onDayMouseenter: (day: import("../../utils/page").CalendarDay, event: MouseEvent) => void;
    onDayMouseleave: (day: import("../../utils/page").CalendarDay, event: MouseEvent) => void;
    onDayFocusin: (day: import("../../utils/page").CalendarDay, event: FocusEvent | null) => void;
    onDayFocusout: (day: import("../../utils/page").CalendarDay, event: FocusEvent) => void;
    onWeeknumberClick: (week: import("../../utils/page").CalendarWeek, event: MouseEvent) => void;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    view: {
        type: import("vue").PropType<import("../../use/calendar").CalendarView>;
        default: string;
        validator(value: string): boolean;
    };
    rows: {
        type: NumberConstructor;
        default: number;
    };
    columns: {
        type: NumberConstructor;
        default: number;
    };
    step: NumberConstructor;
    titlePosition: {
        type: import("vue").PropType<import("../../utils/page").TitlePosition>;
        default: () => import("../../utils/page").TitlePosition;
    };
    navVisibility: {
        type: import("vue").PropType<import("../../utils/popovers").PopoverVisibility>;
        default: () => import("../../utils/popovers").PopoverVisibility;
    };
    showWeeknumbers: (BooleanConstructor | StringConstructor)[];
    showIsoWeeknumbers: (BooleanConstructor | StringConstructor)[];
    expanded: BooleanConstructor;
    borderless: BooleanConstructor;
    transparent: BooleanConstructor;
    initialPage: import("vue").PropType<import("../../utils/page").PageAddress>;
    initialPagePosition: {
        type: NumberConstructor;
        default: number;
    };
    minPage: import("vue").PropType<import("../../utils/page").PageAddress>;
    maxPage: import("vue").PropType<import("../../utils/page").PageAddress>;
    transition: import("vue").PropType<import("../../use/calendar").MoveTransition>;
    attributes: import("vue").PropType<Partial<{
        key: string | number;
        hashcode: string;
        content: import("../../utils/glyph").ContentConfig;
        highlight: import("../../utils/glyph").HighlightConfig;
        dot: import("../../utils/glyph").DotConfig;
        bar: import("../../utils/glyph").BarConfig;
        popover: Partial<{
            label: string;
            visibility: import("../../utils/popovers").PopoverVisibility;
            placement: import("@popperjs/core").Placement;
            hideIndicator: boolean;
            isInteractive: boolean;
        }>;
        event: Partial<{
            label: string;
        }>;
        dates: import("../../utils/date/range").DateRangeSource[];
        customData: any;
        order: number;
        pinPage: boolean;
    }>[]>;
    trimWeeks: BooleanConstructor;
    disablePageSwipe: BooleanConstructor;
    color: {
        type: StringConstructor;
        default: () => any;
    };
    isDark: {
        type: import("vue").PropType<boolean | "system" | import("vue-screen-utils").DarkModeClassConfig>;
        default: () => any;
    };
    firstDayOfWeek: import("vue").PropType<import("../../utils/date/helpers").DayOfWeek>;
    masks: ObjectConstructor;
    locale: import("vue").PropType<string | Record<string, any> | import("../../utils/locale").default>;
    timezone: StringConstructor;
    minDate: null;
    maxDate: null;
    disabledDates: null;
}>> & Readonly<{}>, {
    view: import("../../use/calendar").CalendarView;
    trimWeeks: boolean;
    titlePosition: import("../../utils/page").TitlePosition;
    color: string;
    isDark: boolean | "system" | import("vue-screen-utils").DarkModeClassConfig;
    navVisibility: import("../../utils/popovers").PopoverVisibility;
    rows: number;
    columns: number;
    expanded: boolean;
    borderless: boolean;
    transparent: boolean;
    initialPagePosition: number;
    disablePageSwipe: boolean;
}, {}, {
    CalendarHeader: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
        page: {
            type: import("vue").PropType<import("../../utils/page").Page>;
            required: true;
        };
        layout: {
            type: import("vue").PropType<string>;
        };
        isLg: {
            type: import("vue").PropType<boolean>;
        };
        isXl: {
            type: import("vue").PropType<boolean>;
        };
        is2xl: {
            type: import("vue").PropType<boolean>;
        };
        hideTitle: {
            type: import("vue").PropType<boolean>;
        };
        hideArrows: {
            type: import("vue").PropType<boolean>;
        };
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
        page: {
            type: import("vue").PropType<import("../../utils/page").Page>;
            required: true;
        };
        layout: {
            type: import("vue").PropType<string>;
        };
        isLg: {
            type: import("vue").PropType<boolean>;
        };
        isXl: {
            type: import("vue").PropType<boolean>;
        };
        is2xl: {
            type: import("vue").PropType<boolean>;
        };
        hideTitle: {
            type: import("vue").PropType<boolean>;
        };
        hideArrows: {
            type: import("vue").PropType<boolean>;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
    CalendarPage: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
    CalendarNavPopover: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
    CalendarDayPopover: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
    CalendarPageProvider: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("vue").ExtractPropTypes<{
            page: {
                type: import("vue").PropType<import("../../utils/page").Page>;
                required: true;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import("vue").ExtractPropTypes<{
            page: {
                type: import("vue").PropType<import("../../utils/page").Page>;
                required: true;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, {}>;
        __isFragment?: undefined;
        __isTeleport?: undefined;
        __isSuspense?: undefined;
    } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
        page: {
            type: import("vue").PropType<import("../../utils/page").Page>;
            required: true;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            default?(_: {}): any;
        };
    });
    CalendarSlot: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("vue").ExtractPropTypes<{
            name: {
                type: import("vue").PropType<import("./CalendarSlot.vue").CalendarSlotName>;
                required: true;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import("vue").ExtractPropTypes<{
            name: {
                type: import("vue").PropType<import("./CalendarSlot.vue").CalendarSlotName>;
                required: true;
            };
        }>> & Readonly<{}>, {}, {}, {}, {}, {}>;
        __isFragment?: undefined;
        __isTeleport?: undefined;
        __isSuspense?: undefined;
    } & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
        name: {
            type: import("vue").PropType<import("./CalendarSlot.vue").CalendarSlotName>;
            required: true;
        };
    }>> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            default?(_: {}): any;
        };
    });
}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default _default;
